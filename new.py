import streamlit as st
import psycopg2
import plotly.graph_objects as go
import json
import re
from pathlib import Path
from datetime import datetime, time,timedelta
import time as tm
from fpdf import FPDF
#from calendario import exibir_calendario, exibir_formulario_ferias,minhas_ferias_marcadas,ferias_marcadas,add_evento
import tempfile
import os
import base64
import pandas as pd
import hashlib
from io import BytesIO
from zipfile import ZipFile
import pickle
from openpyxl import Workbook
from openpyxl.utils import get_column_letter
from openpyxl.styles import Alignment
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request
from googleapiclient.discovery import build
st.set_page_config(page_title="Sistema de Ponto", layout="centered")
# üîπ Fun√ß√£o para carregar as configura√ß√µes do banco de dados
def carregar_configuracao():
    try:
        with open('config.json', 'r') as file:
            return json.load(file)
    except FileNotFoundError:
        st.error("Arquivo de configura√ß√£o 'config.json' n√£o encontrado.")
        return None
    except json.JSONDecodeError as e:
        st.error(f"Erro ao decodificar 'config.json': {e}")
        return None

# üîπ Carregar configura√ß√µes do banco de dados
DB_CONFIG = carregar_configuracao()

# üîπ Fun√ß√£o para obter conex√£o persistente
@st.cache_resource
def obter_conexao_persistente():
    if not DB_CONFIG:
        st.error("Configura√ß√µes do banco n√£o carregadas.")
        return None
    
    try:
        # üîπ Criar conex√£o ao Postgre usando a sintaxe correta
        connection = psycopg2.connect(dbname=DB_CONFIG["database"], user=DB_CONFIG["user"], password=DB_CONFIG["password"], host=DB_CONFIG["host"], port=5432)
        return connection
    except KeyError as e:
        st.error(f"Configura√ß√£o ausente no 'config.json': {e}")
        return None
    except Exception as e:
        st.error(f"Erro ao conectar ao banco de dados: {e}")
        return None

# üîπ Criar a conex√£o persistente
conexao_persistente = obter_conexao_persistente()


def carregar_configuracoes_empresa():
    caminho_arquivo = Path("empresa.json")
    if not caminho_arquivo.exists():
        st.error("O arquivo 'empresa.json' n√£o foi encontrado.")
        return {"almoco_minimo": "01:00:00", "limite_horas_normais": "08:40:00"}
    
    try:
        with open(caminho_arquivo, "r", encoding="utf-8") as arquivo:
            config = json.load(arquivo)
            config.setdefault("almoco_minimo", "01:00:00")
            config.setdefault("limite_horas_normais", "08:40:00")
            return config
    except Exception as e:
        st.error(f"Erro ao carregar 'empresa.json': {e}")
        return {"almoco_minimo": "01:00:00", "limite_horas_normais": "08:40:00"}


# Fun√ß√£o para criptografar senhas
def criptografar_senha(senha):
    return hashlib.sha256(senha.encode()).hexdigest()


def tela_login():
    logo = "./logo-ligth.png"
    with open(logo, "rb") as image_file:
        base64_image = base64.b64encode(image_file.read()).decode()

    st.markdown(
        f"""
        <div style="display: flex; justify-content: center;margin-top: -20px;">
            <img src="data:image/png;base64,{base64_image}" style="width: 200px;"/>
        </div>
        """,
        unsafe_allow_html=True,
    )
    st.markdown("<h1 style='text-align: center;'>Autentica√ß√£o</h1>", unsafe_allow_html=True)

    with st.form(key="login_form"):
        username = st.text_input("Usu√°rio")
        senha = st.text_input("Senha", type="password")
        submit_button = st.form_submit_button("Entrar", use_container_width=True)

        if submit_button:
            conn = conexao_persistente
            username = username.strip()
            if conn:
                with conn.cursor() as cursor:
                    cursor.execute("""
                        SELECT id, nome, cargo, administrador, cadastro, agendamento, edita_ponto, auditoria, gerenciar_permissoes, senha
                        FROM funcionarios
                        WHERE username = %s AND ATIVO = TRUE
                    """, (username,))
                    usuario = cursor.fetchone()

                    if usuario and usuario[9] == criptografar_senha(senha):  # √çndice ajustado para senha
                        st.session_state["usuario"] = {
                            "id": usuario[0],
                            "nome": usuario[1],
                            "cargo": usuario[2],
                            "administrador": usuario[3] == '1',
                            "cadastro": usuario[4] == '1',
                            "agendamento": usuario[5] == '1',
                            "edita_ponto": usuario[6] == '1',
                            "auditoria": usuario[7] == '1',
                            "gerenciar_permissoes": usuario[8] == '1',  # Novo acesso
                        }
                        st.success(f"Bem-vindo, {usuario[1]}!")
                        st.rerun()
                    else:
                        st.error("Usu√°rio ou senha incorretos, ou usu√°rio inativo.")


# Tela inicial

def tela_inicial():
    if "usuario" not in st.session_state:
        tela_login()
    else:
        st.empty()
        st.sidebar.image("logo-dna.png", use_container_width=True)
        usuario = st.session_state["usuario"]

        if "menu_ativo" not in st.session_state:
            st.session_state.menu_ativo = "Registrar Ponto"

        def resetar_menus(exceto=None):
            if exceto != "geral":
                st.session_state.menu_geral = None
            if exceto != "admin":
                st.session_state.menu_admin = None
            if exceto != "cadastro":
                st.session_state.menu_cadastro = None
            if exceto != "agenda":
                st.session_state.menu_agenda = None
            if exceto != "edita_ponto":
                st.session_state.menu_edita_ponto = None
            if exceto != "auditoria":  # Novo submenu
                st.session_state.menu_auditoria = None

        with st.sidebar.expander("üíª Menu Geral", expanded=False):
            escolha_geral = st.radio(
                "Op√ß√µes Gerais",
                ["Registrar Ponto", "Agenda", "Meus Registros", "Minhas Faltas",
                 "Minhas Horas Extras", "Minhas F√©rias", "Alterar Senha"],
                index=None,
                key="menu_geral",
                on_change=resetar_menus,
                args=("geral",)
            )

        escolha_cadastro = None
        if usuario.get("cadastro"):  # Verifica apenas "cadastro" para exibir o expander
            with st.sidebar.expander("üìù Cadastros", expanded=False):
                opcoes_cadastro = ["Cadastrar Funcion√°rio", "Lista de Funcion√°rios", "Alterar Cadastro", "Manuten√ß√£o de Senha"]
                if usuario.get("gerenciar_permissoes"):  # Adiciona a op√ß√£o se tiver permiss√£o
                    opcoes_cadastro.append("Acesso dos Funcion√°rios")
                escolha_cadastro = st.radio(
                    "Op√ß√µes do Cadastro",
                    opcoes_cadastro,
                    index=None,
                    key="menu_cadastro",
                    on_change=resetar_menus,
                    args=("cadastro",)
                )

        escolha_admin = None
        if usuario.get("administrador"):
            with st.sidebar.expander("üìä Administra√ß√£o", expanded=False):
                escolha_admin = st.radio(
                    "Op√ß√µes Administrativas",
                    ["Dashboard", "Registros do Dia", "Folha de Ponto", "Banco de Horas", "Registro de Faltas", "F√©rias Marcadas"],
                    index=None,
                    key="menu_admin",
                    on_change=resetar_menus,
                    args=("admin",)
                )

        escolha_agenda = None
        if usuario.get("agendamento"):
            with st.sidebar.expander("üìÖ Agenda", expanded=False):
                escolha_agenda = st.radio(
                    "Op√ß√µes de Agenda",
                    ["Agendar F√©rias", "F√©rias Marcadas", "Agendamento"],
                    index=None,
                    key="menu_agenda",
                    on_change=resetar_menus,
                    args=("agenda",)
                )

        escolha_editar_ponto = None
        if usuario.get("edita_ponto"):
            with st.sidebar.expander("üïí Gerenciamento de Ponto", expanded=False):
                escolha_editar_ponto = st.radio(
                    "Ger√™ncia",
                    ["Manuten√ß√£o do Ponto"],
                    index=None,
                    key="menu_edita_ponto",
                    on_change=resetar_menus,
                    args=("edita_ponto",)
                )

        escolha_auditoria = None
        if usuario.get("auditoria"):  # Novo submenu vinculado ao acesso AUDITORIA
            with st.sidebar.expander("üîç Auditoria", expanded=False):
                escolha_auditoria = st.radio(
                    "Op√ß√µes de Auditoria",
                    ["Altera√ß√µes de Cadastro", "Altera√ß√µes de Ponto"],
                    index=None,
                    key="menu_auditoria",
                    on_change=resetar_menus,
                    args=("auditoria",)
                )

        escolha = escolha_geral or escolha_cadastro or escolha_admin or escolha_agenda or escolha_editar_ponto or escolha_auditoria
        if escolha:
            st.session_state.menu_ativo = escolha

        if st.session_state.menu_ativo == "Registrar Ponto":
            tela_funcionario()
        elif st.session_state.menu_ativo == "Alterar Senha":
            alterar_senha()
        elif st.session_state.menu_ativo == "Agenda":
            exibir_calendario()
        elif st.session_state.menu_ativo == "Meus Registros":
            tela_periodo_trabalhado()
        elif st.session_state.menu_ativo == "Minhas Faltas":
            tela_usuario_faltas()
        elif st.session_state.menu_ativo == "Minhas Horas Extras":
            tela_banco_horas()
        elif st.session_state.menu_ativo == "Minhas F√©rias":
            minhas_ferias_marcadas()

        elif st.session_state.menu_ativo == "Dashboard":
            tela_dashboard_admin()
        elif st.session_state.menu_ativo == "Registros do Dia":
            tela_funcionarios_ponto_dia()
        elif st.session_state.menu_ativo == "Cadastrar Funcion√°rio":
            cadastrar_funcionarios()
        elif st.session_state.menu_ativo == "Lista de Funcion√°rios":
            tela_listar_funcionarios()
        elif st.session_state.menu_ativo == "Alterar Cadastro":
            tela_manutencao_funcionarios()
        elif st.session_state.menu_ativo == "Acesso dos Funcion√°rios":  # Nova op√ß√£o no submenu Cadastros
            tela_gerenciar_permissoes()

        elif st.session_state.menu_ativo == "Folha de Ponto":
            tela_periodo_trabalhado_adm()
        elif st.session_state.menu_ativo == "Banco de Horas":
            tela_banco_horas_admin()
        elif st.session_state.menu_ativo == "Registro de Faltas":
            tela_admin_faltas()
        elif st.session_state.menu_ativo == "Manuten√ß√£o de Senha":
            tela_alterar_senha_admin()

        elif st.session_state.menu_ativo == "Manuten√ß√£o do Ponto":
            tela_registro_ponto_manual()

        elif st.session_state.menu_ativo == "Agendar F√©rias":
            exibir_formulario_ferias()
        elif st.session_state.menu_ativo == "F√©rias Marcadas":
            ferias_marcadas()
        elif st.session_state.menu_ativo == "Agendamento":
            add_evento()

        elif st.session_state.menu_ativo == "Altera√ß√µes de Cadastro":  # Nova tela
            tela_auditoria_cadastros()
        elif st.session_state.menu_ativo == "Altera√ß√µes de Ponto":  # Nova tela
            tela_auditoria_pontos()

        if st.sidebar.button("Sair", use_container_width=True):
            st.session_state.clear()
            st.sidebar.success("Sess√£o encerrada!")
            st.rerun()

@st.cache_data
def listar_usuarios():
    if not conexao_persistente:
        st.error("Conex√£o com o banco de dados n√£o dispon√≠vel.")
        return []
    try:
        with conexao_persistente.cursor() as cursor:
            cursor.execute("""
                SELECT ID, NOME, USERNAME, EMAIL, DTCONTRATACAO, ADMINISTRADOR, AGENDAMENTO, EDITA_PONTO 
                FROM FUNCIONARIOS 
                ORDER BY 2

            """)
            return cursor.fetchall()
    except Exception as e:
        st.error(f"Erro ao listar usu√°rios: {e}")
        return []


def alterar_senha_usuario(usuario_id, nova_senha):
    """Atualiza a senha do usu√°rio no banco de dados."""
    senha_criptografada = criptografar_senha(nova_senha)
    cursor = conexao_persistente.cursor()
    cursor.execute("UPDATE FUNCIONARIOS SET SENHA = %s WHERE ID = %s", (senha_criptografada, usuario_id))
    conexao_persistente.commit()
    st.success("Senha alterada com sucesso!")


def tela_alterar_senha_admin():
    st.markdown("<h1 style='text-align: center;'>Alterar Senha de Usu√°rios</h1>", unsafe_allow_html=True)

    usuarios = listar_usuarios()

    if not usuarios:
        st.warning("Nenhum usu√°rio cadastrado encontrado.")
        return

    # Criar um DataFrame para facilitar o uso
    df_usuarios = pd.DataFrame(usuarios, columns=["ID", "Nome", "Username", "Email", "DtContratacao", "Administrador", "Agendamento","edita_ponto"])

    # Selectbox para escolher o usu√°rio
    nomes_usuarios = df_usuarios["Nome"].tolist()
    usuario_selecionado = st.selectbox("Selecione um usu√°rio para alterar a senha", options=nomes_usuarios)

    # Obter o ID do usu√°rio selecionado
    usuario_info = df_usuarios[df_usuarios["Nome"] == usuario_selecionado].iloc[0]
    id_usuario = usuario_info["ID"]

    # Formul√°rio para alterar a senha
    with st.form(key=f"form_usuario_{id_usuario}"):
        nova_senha = st.text_input("Digite a nova senha", type="password", key=f"senha_{id_usuario}")
        confirmar_senha = st.text_input("Confirme a nova senha", type="password", key=f"confirmar_{id_usuario}")
        alterar = st.form_submit_button("Alterar Senha", use_container_width=True)

        if alterar:
            if not nova_senha or not confirmar_senha:
                st.error("Por favor, preencha os dois campos de senha.")
            elif nova_senha != confirmar_senha:
                st.error("As senhas n√£o coincidem. Tente novamente.")
            else:
                try:
                    alterar_senha_usuario(id_usuario, nova_senha)
                    st.success(f"Senha do usu√°rio {usuario_selecionado} alterada com sucesso!")
                except Exception as e:
                    st.error(f"Erro ao alterar a senha: {e}")



# Fun√ß√£o para formatar hor√°rio
def formatar_horario(horario):
    """Formata o hor√°rio no formato HH:MM:SS ou retorna 'N√£o registrado' se nulo."""
    if horario is None:
        return ""

    if isinstance(horario, time):
        return horario.strftime("%H:%M:%S")

    if isinstance(horario, str):
        try:
            return datetime.strptime(horario, "%H:%M:%S").strftime("%H:%M:%S")
        except ValueError:
            return ""

    return "" #Removi a exibi√ß√£o do n√£o registrado no frame

def obter_registros(funcionario_id, data_inicio, data_fim):
    """Obt√©m registros de ponto do banco de dados para o per√≠odo selecionado."""
    conn = conexao_persistente  # Certifique-se de que essa fun√ß√£o existe e retorna a conex√£o com o banco
    if not conn:
        st.error("Erro ao conectar ao banco de dados.")
        return None, None, None, pd.DataFrame()

    cursor = conexao_persistente.cursor()
    try:
        # Busca informa√ß√µes do funcion√°rio
        cursor.execute("SELECT NOME, CARGO, DTCADASTRO FROM FUNCIONARIOS WHERE ID = %s", (funcionario_id,))
        funcionario = cursor.fetchone()

        if not funcionario:
            st.error("Funcion√°rio n√£o encontrado.")
            return None, None, None, pd.DataFrame()

        nome, cargo, dtcadastro = funcionario

        # Busca registros de ponto no per√≠odo, garantindo que data_inicio e data_fim sejam respeitados
        cursor.execute("""
            SELECT DATA, CHEGADA, SAIDA_ALMOCO, RETORNO_ALMOCO, SAIDA 
            FROM REGISTROS 
            WHERE FUNCIONARIO_ID = %s AND DATA BETWEEN %s AND %s
            ORDER BY DATA
        """, (funcionario_id, data_inicio, data_fim))
        registros = cursor

        if not registros:
            st.warning("Nenhum registro encontrado no per√≠odo selecionado.")
            return nome, cargo, dtcadastro, pd.DataFrame()

        # Formatar registros em um DataFrame
        df = pd.DataFrame(registros, columns=["Data", "Chegada", "Sa√≠da Almo√ßo", "Retorno Almo√ßo", "Sa√≠da"])

        # Garantir que a coluna 'Data' seja convertida para datetime e sem hora
        df["Data"] = pd.to_datetime(df["Data"]).dt.date  # Converte para apenas data (sem hora)

        # Criar a coluna "Dia da semana"
        dias_semana = {0: "Seg", 1: "Ter", 2: "Qua", 3: "Qui", 4: "Sex", 5: "S√°b", 6: "Dom"}
        df["Dia"] = df["Data"].apply(lambda x: dias_semana[x.weekday()])

        # Criar a coluna "Data e Dia" no formato "dd/mm/yyyy - DDD"
        df["Data e Dia"] = df["Data"].apply(lambda x: x.strftime('%d/%m/%Y')) + " - " + df["Dia"]

        # Garantir que a coluna "Data e Dia" seja a primeira
        df = df[["Data e Dia", "Chegada", "Sa√≠da Almo√ßo", "Retorno Almo√ßo", "Sa√≠da"]]

        # Aplicar a formata√ß√£o de hor√°rio
        df["Chegada"] = df["Chegada"].apply(formatar_horario)
        df["Sa√≠da Almo√ßo"] = df["Sa√≠da Almo√ßo"].apply(formatar_horario)
        df["Retorno Almo√ßo"] = df["Retorno Almo√ßo"].apply(formatar_horario)
        df["Sa√≠da"] = df["Sa√≠da"].apply(formatar_horario)

        # Adicionar dias faltantes no per√≠odo solicitado
        todas_datas = pd.date_range(start=data_inicio, end=data_fim, freq='D')
        datas_existentes = df["Data e Dia"].to_list()

        # Dias que faltam no DataFrame (dentro do intervalo)
        dias_faltantes = [
            data.strftime("%d/%m/%Y") + " - " + dias_semana[data.weekday()] 
            for data in todas_datas 
            if data.strftime("%d/%m/%Y") + " - " + dias_semana[data.weekday()] not in datas_existentes
        ]
        
        # Criar um DataFrame com os dias faltantes
        dias_faltantes_df = pd.DataFrame(dias_faltantes, columns=["Data e Dia"])
        dias_faltantes_df["Chegada"] = ""
        dias_faltantes_df["Sa√≠da Almo√ßo"] = ""
        dias_faltantes_df["Retorno Almo√ßo"] = ""
        dias_faltantes_df["Sa√≠da"] = ""

        # Concatenar os dados existentes com os faltantes
        df = pd.concat([df, dias_faltantes_df], ignore_index=True)

        # Ordenar o DataFrame pela coluna "Data e Dia"
        df = df.sort_values(by="Data e Dia").reset_index(drop=True)

        # Centralizando os dados no dataframe
        df_style = df.style.set_properties(**{'text-align': 'center'})

        # Exibindo o dataframe centralizado
        #st.dataframe(df_style, use_container_width=True)
        st.dataframe(df,hide_index=True ,use_container_width=True)

        return nome, cargo, dtcadastro, df
    except Exception as e:
        st.error(f"Ocorreu um erro ao buscar os registros: {e}")
        return None, None, None, pd.DataFrame()
    finally:
        ''
#Cadastro da empresa
def carregar_dados_empresa():
    caminho_arquivo = Path("empresa.json")
    if not caminho_arquivo.exists():
        raise FileNotFoundError("O arquivo 'empresa.json' n√£o foi encontrado na raiz do projeto.")
    
    with open(caminho_arquivo, "r", encoding="utf-8") as arquivo:
        return json.load(arquivo)

# Fun√ß√£o para gerar PDF
def gerar_pdf(nome, cargo, dtcadastro, df):

    # Carregar informa√ß√µes da empresa do arquivo JSON
    try:
        dados_empresa = carregar_dados_empresa()
    except FileNotFoundError as e:
        print(e)
        return
        
    pdf = FPDF()
    pdf.set_auto_page_break(auto=True, margin=5)
    pdf.set_top_margin(0)
    pdf.add_page()
    pdf.set_font("Arial", size=12)

    # T√≠tulo
    pdf.set_font("Arial", style="B", size=12)
    pdf.cell(0, 10, "Relat√≥rio de Ponto", ln=True, align="C")

    # Informa√ß√µes da empresa e do funcion√°rio lado a lado
    pdf.set_font("Arial", size=9)

    # Primeira coluna: informa√ß√µes da empresa (ajustada para ser mais larga)
    x_start = pdf.get_x()
    y_start = pdf.get_y()
    pdf.multi_cell(100, 5, 
                    f"Empresa: {dados_empresa['nome']}\n"
                    f"CNPJ/CPF: {dados_empresa['cnpj']}\n"
                    f"Endere√ßo: {dados_empresa['endereco']}\n"
                    f"Cidade/UF: {dados_empresa['cidade']} - {dados_empresa['uf']}",                   
                   border=1)
    
    # Segunda coluna: informa√ß√µes do funcion√°rio (texto alinhado √† direita)
    pdf.set_xy(x_start + 100, y_start)  # Move para a pr√≥xima coluna
    pdf.multi_cell(90, 5, 
                   f"136 - {nome}\n"
                   f"Fun√ß√£o: 007 - {cargo}\n"
                   f"Admiss√£o: {dtcadastro.strftime('%d/%m/%Y') if dtcadastro else 'N√£o informado'}\n"
                   f"Hor√°rio: 08:00 - 11:00 - 12:00 - 17:00", 
                   border=1, align="R")
    #pdf.ln(10)

    pdf.set_font("Arial", style="B", size=9)
    pdf.cell(34, 7, "Dia", 1, 0, "C")
    pdf.cell(39, 7, "Chegada", 1, 0, "C")
    pdf.cell(39, 7, "Sa√≠da Almo√ßo", 1, 0, "C")
    pdf.cell(39, 7, "Retorno Almo√ßo", 1, 0, "C")
    pdf.cell(39, 7, "Sa√≠da", 1, 1, "C")

    # Dados da tabela
    pdf.set_font("Arial", size=9)
    for _, row in df.iterrows():
        # Garantir que a "Data e Dia" seja uma string v√°lida
        data_dia = str(row["Data e Dia"]) if pd.notnull(row["Data e Dia"]) else ""

        # Preencher as c√©lulas, convertendo valores para string quando necess√°rio
        pdf.cell(34, 6, data_dia, 1, 0, "L")
        pdf.cell(39, 6, str(row["Chegada"]), 1, 0, "C")
        pdf.cell(39, 6, str(row["Sa√≠da Almo√ßo"]), 1, 0, "C")
        pdf.cell(39, 6, str(row["Retorno Almo√ßo"]), 1, 0, "C")
        pdf.cell(39, 6, str(row["Sa√≠da"]), 1, 1, "C")
    
    # Adicionar as assinaturas e a data
    pdf.ln(8)
    pdf.set_font("Arial", size=9)

    # Reconhecimento e Data
    pdf.cell(0, 10, "Reconhe√ßo a exatid√£o destas anota√ß√µes.", ln=True, align="L")
    pdf.cell(30, 10, "Data: ____/____/____", 0, 0, "L")
    pdf.ln(10)

    largura_pagina = pdf.w - 2 * pdf.l_margin
    largura_assinatura = largura_pagina / 2  # Metade da largura para cada assinatura

    # Assinatura do Funcion√°rio (centralizado na metade esquerda)
    pdf.cell(largura_assinatura, 8, "______________________________________", 0, 0, "C")

    # Assinatura do Diretor (centralizado na metade direita)
    pdf.cell(largura_assinatura, 8, "______________________________________", 0, 1, "C")
    pdf.set_y(pdf.get_y() - 2)
    # Legendas das assinaturas
    pdf.cell(largura_assinatura, 8, "Ass. Funcion√°rio", 0, 0, "C")
    pdf.cell(largura_assinatura, 8, "Ass. do Diretor", 0, 1, "C")

    # Criar um arquivo tempor√°rio para salvar o PDF
    temp_file = tempfile.NamedTemporaryFile(delete=False, suffix=".pdf")
    pdf.output(temp_file.name)

    return temp_file.name  # Retorna o caminho do arquivo tempor√°rio




# Fun√ß√£o principal para exibi√ß√£o do relat√≥rio
def tela_periodo_trabalhado():
    """Tela principal para exibi√ß√£o do relat√≥rio de ponto."""
    if "usuario" not in st.session_state:
        st.warning("Fa√ßa login para acessar esta √°rea.")
        return

    usuario = st.session_state["usuario"]

    #st.title("Relat√≥rio de Ponto")
    st.markdown("<h1 style='text-align: center;'>Relat√≥rio de Ponto</h1>", unsafe_allow_html=True)
    st.write("Selecione o per√≠odo desejado para exibir os registros de ponto:")

    # Sele√ß√£o de per√≠odo
    col1, col2 = st.columns(2)
    with col1:
        primeiro_dia_mes = datetime(datetime.now().year, datetime.now().month, 1)
        data_inicio = st.date_input("Data de in√≠cio", value=primeiro_dia_mes,format="DD/MM/YYYY")
        #st.write("Data selecionada:", data_inicio.strftime("%d/%m/%Y"))
        #data_inicio = st.date_input("Data de in√≠cio", value=datetime.now() - timedelta(days=30))
    with col2:
        data_fim = st.date_input("Data de fim", value=datetime.now(),format="DD/MM/YYYY")

    if data_inicio > data_fim:
        st.error("A data de in√≠cio n√£o pode ser maior que a data de fim.")
        return

    funcionario_id = usuario.get("id")
    if not funcionario_id:
        st.error("Erro ao identificar o funcion√°rio logado.")
        return

    # Obter registros
    nome, cargo, dtcadastro, df = obter_registros(funcionario_id, data_inicio, data_fim)

    if not df.empty:
        #st.dataframe(df)

        # Gerar PDF e oferecer download
        pdf_file = gerar_pdf(nome, cargo, dtcadastro, df)
        with open(pdf_file, "rb") as f:
            st.download_button(
                label="Baixar Relat√≥rio em PDF",
                data=f,
                file_name=f"Relatorio_Ponto_{nome.replace(' ', '_')}.pdf",
                mime="application/pdf"
            )
        os.remove(pdf_file)  # Remover arquivo tempor√°rio
    else:
        st.warning("Nenhum registro encontrado no per√≠odo selecionado.")

###
##
def tela_periodo_trabalhado_adm():
    """Tela principal para exibi√ß√£o do relat√≥rio de ponto."""
    if "usuario" not in st.session_state:
        st.warning("Fa√ßa login para acessar esta √°rea.")
        return

    # Conex√£o com o banco de dados
    conn = conexao_persistente
    if not conn:
        st.error("Erro ao conectar ao banco de dados.")
        return

    cursor = conn.cursor()
    cursor.execute("ROLLBACK")

    # T√≠tulo e instru√ß√µes
    st.markdown("<h1 style='text-align: center;'>Relat√≥rio de Ponto</h1>", unsafe_allow_html=True)
    st.write("Selecione o per√≠odo desejado para exibir os registros de ponto:")


    # Obter lista de funcion√°rios
    cursor.execute("SELECT ID, NOME FROM FUNCIONARIOS ORDER BY NOME")
    funcionarios = cursor.fetchall()
    opcoes_funcionarios = {f"{nome}": id_func for id_func, nome in funcionarios}

    # Sele√ß√£o do funcion√°rio
    funcionario_selecionado = st.selectbox("Selecione o Funcion√°rio:", options=opcoes_funcionarios.keys())

    if not funcionario_selecionado:
        st.warning("Selecione um funcion√°rio para continuar.")
        return

    funcionario_id = opcoes_funcionarios[funcionario_selecionado]

    # Sele√ß√£o de per√≠odo
    col1, col2 = st.columns(2)
    with col1:
        primeiro_dia_mes = datetime(datetime.now().year, datetime.now().month, 1)
        data_inicio = st.date_input("Data de in√≠cio", value=primeiro_dia_mes, format="DD/MM/YYYY")
    with col2:
        data_fim = st.date_input("Data de fim", value=datetime.now(), format="DD/MM/YYYY")

    if data_inicio > data_fim:
        st.error("A data de in√≠cio n√£o pode ser maior que a data de fim.")
        return

    # Obter registros do funcion√°rio selecionado
    nome, cargo, dtcadastro, df = obter_registros(funcionario_id, data_inicio, data_fim)

    if not df.empty:
        col1, col2 = st.columns(2)

        with col1:
            # Gerar PDF do funcion√°rio selecionado
            pdf_file = gerar_pdf(nome, cargo, dtcadastro, df)
            with open(pdf_file, "rb") as f:
                st.download_button(
                    label="Baixar Registro do Funcionario Filtrado",
                    data=f,
                    file_name=f"Relatorio_Ponto_{nome.replace(' ', '_')}.pdf",
                    mime="application/pdf",use_container_width=True
                )
            os.remove(pdf_file)  # Remover arquivo tempor√°rio

        with col2:
            if st.button("Solicitar de Todos os Funcion√°rios",use_container_width=True):
                # Consultar registros de todos os funcion√°rios no per√≠odo selecionado
                cursor.execute("""
                    SELECT FUNC.ID, FUNC.NOME, FUNC.CARGO, FUNC.DTCADASTRO, REG.DATA, REG.CHEGADA, REG.SAIDA_ALMOCO, REG.RETORNO_ALMOCO, REG.SAIDA
                    FROM REGISTROS REG
                    JOIN FUNCIONARIOS FUNC ON REG.FUNCIONARIO_ID = FUNC.ID
                    WHERE REG.DATA BETWEEN %s AND %s
                    ORDER BY FUNC.ID, REG.DATA
                """, (data_inicio, data_fim))
                registros = cursor.fetchall()

                if registros:
                    # Agrupar os registros por funcion√°rio
                    funcionarios_registros = {}
                    for registro in registros:
                        funcionario_id = registro[0]
                        if funcionario_id not in funcionarios_registros:
                            funcionarios_registros[funcionario_id] = {
                                "nome": registro[1],
                                "cargo": registro[2],
                                "admissao": registro[3],
                                "registros": []
                            }
                        funcionarios_registros[funcionario_id]["registros"].append(registro[4:])

                    # Criar PDFs individuais para cada funcion√°rio e armazen√°-los em um arquivo ZIP
                    zip_buffer = BytesIO()
                    with ZipFile(zip_buffer, "w") as zip_file:
                        for funcionario_id, dados in funcionarios_registros.items():
                            # Criar DataFrame para os registros do funcion√°rio
                            registros_df = pd.DataFrame(
                                dados["registros"],
                                columns=["Data", "Chegada", "Sa√≠da Almo√ßo", "Retorno Almo√ßo", "Sa√≠da"]
                            )

                            # Gerar um range de datas para incluir todos os dias no per√≠odo
                            todas_as_datas = pd.date_range(start=data_inicio, end=data_fim)
                            datas_df = pd.DataFrame({"Data": todas_as_datas})

                            # Mesclar para garantir que todos os dias estejam presentes
                            registros_df["Data"] = pd.to_datetime(registros_df["Data"], errors='coerce')
                            registros_completos = datas_df.merge(
                                registros_df,
                                on="Data",
                                how="left"
                            )

                            # Substituir valores nulos por vazio (campo em branco)
                            registros_completos.fillna("", inplace=True)

                            # Adicionar a coluna "Data e Dia" com nomes de dias em portugu√™s (abreviados)
                            registros_completos["Data e Dia"] = registros_completos["Data"].dt.strftime("%d/%m/%Y (%a)")
                            registros_completos["Data e Dia"] = registros_completos["Data e Dia"].replace({
                                "Mon": "Seg",
                                "Tue": "Ter",
                                "Wed": "Qua",
                                "Thu": "Qui",
                                "Fri": "Sex",
                                "Sat": "Sab",
                                "Sun": "Dom"
                            }, regex=True)

                            # Formatar hor√°rios para hh:mm:ss
                            for coluna in ["Chegada", "Sa√≠da Almo√ßo", "Retorno Almo√ßo", "Sa√≠da"]:
                                registros_completos[coluna] = registros_completos[coluna].apply(
                                    lambda x: x.strftime("%H:%M:%S") if isinstance(x, time) else x
                                )

                            # Gerar PDF para o funcion√°rio
                            pdf_file = gerar_pdf(
                                dados["nome"],
                                dados["cargo"],
                                dados["admissao"],
                                registros_completos
                            )

                            # Adicionar o PDF ao arquivo ZIP
                            with open(pdf_file, "rb") as f:
                                zip_file.writestr(f"Relatorio_Ponto_{dados['nome'].replace(' ', '_')}.pdf", f.read())
                            os.remove(pdf_file)  # Remover arquivo tempor√°rio

                    # Fornecer o arquivo ZIP como download imediato
                    zip_buffer.seek(0)
                    st.download_button(
                        label="Baixar",
                        data=zip_buffer,
                        file_name="Relatorios_Ponto_Todos_Funcionarios.zip",
                        mime="application/zip",use_container_width=True
                    )
                else:
                    st.warning("Nenhum registro encontrado no per√≠odo selecionado.")


def verificar_restricoes_ponto(cursor, usuario_id):
    """Verifica se o usu√°rio est√° de f√©rias ou j√° tem uma falta registrada no dia."""
    data_atual = datetime.now().date()

    # Verificar se o usu√°rio est√° de f√©rias
    cursor.execute("""
        SELECT COUNT(*) 
        FROM FERIAS 
        WHERE FUNCIONARIO_ID = %s AND %s BETWEEN DATA_INICIO AND DATA_FIM
    """, (usuario_id, data_atual))
    esta_de_ferias = cursor.fetchone()[0] > 0

    # Verificar se j√° h√° uma falta registrada para o usu√°rio
    cursor.execute("""
        SELECT COUNT(*) 
        FROM FALTAS 
        WHERE FUNCIONARIO_ID = %s AND DATA = %s
    """, (usuario_id, data_atual))
    falta_registrada = cursor.fetchone()[0] > 0

    if esta_de_ferias:
        st.error("Voc√™ est√° de f√©rias e n√£o pode registrar o ponto.")
        return False
    elif falta_registrada:
        st.error("Voc√™ j√° possui uma falta registrada para hoje. N√£o √© poss√≠vel bater o ponto.")
        return False

    return True

#Tela para o Registro do ponto


def tela_funcionario():
    if "usuario" not in st.session_state:
        st.warning("Fa√ßa login para acessar esta √°rea.")
        return

    usuario = st.session_state["usuario"]
    nome_completo = usuario['nome']
    primeiro_nome, *sobrenomes = nome_completo.split()
    primeiro_sobrenome = sobrenomes[0] if sobrenomes else ""
    st.markdown(f"<h1 style='text-align: center; font-size: 40px;'>Ol√°, {primeiro_nome} {primeiro_sobrenome}!</h1>", unsafe_allow_html=True)
    st.write('______________________________________________')

    # Carregar feriados com cache
    @st.cache_data
    def carregar_feriados():
        caminho_feriados = Path("feriados.json")
        if caminho_feriados.exists():
            with open(caminho_feriados, "r", encoding="utf-8") as f:
                return {datetime.strptime(data, "%Y-%m-%d").date() for data in json.load(f)}
        st.error("Arquivo 'feriados.json' n√£o encontrado.")
        return set()

    feriados = carregar_feriados()

    def verificar_ausencias(conn, usuario_id):
        data_atual = datetime.now().date()
        with conn.cursor() as cursor:
            cursor.execute("""
                SELECT DATA
                FROM REGISTROS
                WHERE FUNCIONARIO_ID = %s AND DATA <= %s
                ORDER BY DATA DESC
                LIMIT 1
            """, (usuario_id, data_atual - timedelta(days=1)))
            ultimo_ponto = cursor.fetchone()[0] if cursor.rowcount > 0 else None

        if not ultimo_ponto:
            ultimo_ponto = data_atual - timedelta(days=1)

        dias_faltantes = []
        with conn.cursor() as cursor:
            for dia in (ultimo_ponto + timedelta(days=i) for i in range(1, (data_atual - ultimo_ponto).days)):
                if dia.weekday() >= 5 or dia in feriados or dia == data_atual:
                    continue

                cursor.execute("""
                    SELECT EXISTS(SELECT 1 FROM REGISTROS WHERE FUNCIONARIO_ID = %s AND DATA = %s) AS registro,
                           EXISTS(SELECT 1 FROM FALTAS WHERE FUNCIONARIO_ID = %s AND DATA = %s) AS falta,
                           EXISTS(SELECT 1 FROM FERIAS WHERE FUNCIONARIO_ID = %s AND %s BETWEEN DATA_INICIO AND DATA_FIM) AS ferias
                """, (usuario_id, dia, usuario_id, dia, usuario_id, dia))
                registro, falta, ferias = cursor.fetchone()

                if not (registro or falta or ferias):
                    dias_faltantes.append(dia)

        if not dias_faltantes:
            return True

        for data in sorted(dias_faltantes):
            justificativa_key = f"justificativa_{data.strftime('%Y-%m-%d')}"
            if justificativa_key not in st.session_state:
                st.session_state[justificativa_key] = False

            if not st.session_state[justificativa_key]:
                st.warning(f"Falta registrada em {data.strftime('%d/%m/%Y')}. Justifique a aus√™ncia.")
                justificativa = st.text_area(f"Justificativa para {data.strftime('%d/%m/%Y')} (m√≠n. 15 caracteres):", key=f"falta_{data}")
                documento = st.file_uploader(f"Anexo opcional ({data.strftime('%d/%m/%Y')}):", type=["pdf"], key=f"anexo_{data}")
                if st.button("Salvar Justificativa", key=f"salvar_{data}", use_container_width=True):
                    if len(justificativa) < 15:
                        st.error("Justificativa deve ter no m√≠nimo 15 caracteres.")
                    else:
                        with conn.cursor() as cursor:
                            documento_blob = documento.read() if documento else None
                            cursor.execute("""
                                INSERT INTO FALTAS (FUNCIONARIO_ID, DATA, HORA, JUSTIFICATIVA, DOCUMENTO)
                                VALUES (%s, %s, %s, %s, %s)
                            """, (usuario_id, data, datetime.now().time(), justificativa, documento_blob))
                            conn.commit()
                        st.session_state[justificativa_key] = True
                        st.rerun()
        return False

    def verificar_restricoes_ponto(conn, usuario_id):
        data_atual = datetime.now().date()
        with conn.cursor() as cursor:
            cursor.execute("""
                SELECT COUNT(*)
                FROM FERIAS
                WHERE FUNCIONARIO_ID = %s AND %s BETWEEN DATA_INICIO AND DATA_FIM
            """, (usuario_id, data_atual))
            esta_de_ferias = cursor.fetchone()[0] > 0

            cursor.execute("""
                SELECT COUNT(*)
                FROM FALTAS
                WHERE FUNCIONARIO_ID = %s AND DATA = %s
            """, (usuario_id, data_atual))
            falta_registrada = cursor.fetchone()[0] > 0

            if esta_de_ferias:
                st.warning("Voc√™ est√° de f√©rias hoje e n√£o pode registrar ponto.")
                return False
            if falta_registrada:
                st.warning("Voc√™ possui uma falta registrada para hoje.")
                return False
            return True

    def calcular_horas_diarias(registros, data_atual):
        if not registros or not registros[0]:
            return timedelta(0)
        chegada = datetime.combine(data_atual, registros[0])
        saida = datetime.combine(data_atual, registros[3] or datetime.now().time())
        total_horas = saida - chegada
        if registros[1] and registros[2]:
            total_horas -= datetime.combine(data_atual, registros[2]) - datetime.combine(data_atual, registros[1])
        return total_horas

    def calcular_horas_extras(conn, registros, data_atual, funcionario_id):
        if not registros or not registros[0]:
            return
        with conn.cursor() as cursor:
            chegada = datetime.combine(data_atual, registros[0])
            saida = datetime.combine(data_atual, registros[3] or datetime.now().time())
            intervalo_almoco = timedelta()
            if registros[1] and registros[2]:
                intervalo_almoco = datetime.combine(data_atual, registros[2]) - datetime.combine(data_atual, registros[1])

            total_horas = saida - chegada - intervalo_almoco
            limite_horas = timedelta(hours=8, minutes=40)
            tolerancia_saida = datetime.combine(data_atual, time(18, 10))

            if saida > tolerancia_saida and total_horas > limite_horas:
                horas_extras = total_horas - limite_horas
                horas_extras_str = f"{horas_extras.seconds // 3600:02}:{(horas_extras.seconds // 60) % 60:02}:{horas_extras.seconds % 60:02}"
                cursor.execute("""
                    UPDATE REGISTROS
                    SET HORAEXTRA = %s
                    WHERE FUNCIONARIO_ID = %s AND DATA = %s
                """, (horas_extras_str, funcionario_id, data_atual))
                conn.commit()
                st.info(f"Notifica√ß√£o enviada ao administrador: {usuario['nome']} registrou {horas_extras_str} de horas extras em {data_atual.strftime('%d/%m/%Y')}.")

    def registrar_ponto(tipo, conn):
        data_atual = datetime.now().date()
        hora_atual = datetime.now().time()

        with conn.cursor() as cursor:
            cursor.execute("""
                SELECT CHEGADA, SAIDA_ALMOCO, RETORNO_ALMOCO, SAIDA
                FROM REGISTROS
                WHERE FUNCIONARIO_ID = %s AND DATA = %s
            """, (usuario["id"], data_atual))
            registros = cursor.fetchone() or (None, None, None, None)
            chegada, saida_almoco, retorno_almoco, saida = registros

            # Valida√ß√£o de depend√™ncias
            validacoes = {
                "SAIDA_ALMOCO": (not chegada, "Chegada n√£o registrada!"),
                "RETORNO_ALMOCO": (not saida_almoco, "Sa√≠da do almo√ßo n√£o registrada!"),
                "SAIDA": (not retorno_almoco, "Chegada n√£o registrada!"),
                "SAIDA": (not chegada, "Chegada n√£o registrada!")
            }
            if tipo in validacoes and validacoes[tipo][0]:
                if "mensagem_registro" not in st.session_state:
                    st.session_state.mensagem_registro = {}
                st.session_state.mensagem_registro[tipo] = validacoes[tipo][1]  # Armazena a mensagem de erro diretamente
                return

            cursor.execute(f"SELECT {tipo} FROM REGISTROS WHERE FUNCIONARIO_ID = %s AND DATA = %s", (usuario["id"], data_atual))
            resultado = cursor.fetchone()
            registro_existente = resultado[0] if resultado else None

            if registro_existente:
                if "mensagem_registro" not in st.session_state:
                    st.session_state.mensagem_registro = {}
                st.session_state.mensagem_registro[tipo] = "already_registered"
            else:
                cursor.execute(f"""
                    INSERT INTO REGISTROS (FUNCIONARIO_ID, DATA, {tipo})
                    VALUES (%s, %s, %s)
                    ON CONFLICT (FUNCIONARIO_ID, DATA)
                    DO UPDATE SET {tipo} = EXCLUDED.{tipo}
                """, (usuario["id"], data_atual, hora_atual))
                conn.commit()
                if "mensagem_registro" not in st.session_state:
                    st.session_state.mensagem_registro = {}
                st.session_state.mensagem_registro[tipo] = "registered"

                if tipo == "SAIDA":
                    calcular_horas_extras(conn, registros + (hora_atual,), data_atual, usuario["id"])
                    cursor.execute("""
                        SELECT CHEGADA, SAIDA_ALMOCO, RETORNO_ALMOCO, SAIDA
                        FROM REGISTROS
                        WHERE FUNCIONARIO_ID = %s AND DATA = %s
                    """, (usuario["id"], data_atual))
                    registros = cursor.fetchone()
                    if registros[3] and hora_atual > time(18, 10):
                        @st.dialog("Justificativa para Hora Extra")
                        def dialog_justificativa():
                            st.write("Voc√™ excedeu o limite de horas di√°rias. Justifique as horas extras.")
                            justificativa = st.text_area("Justificativa (m√≠n. 15 caracteres):", key="justificativa_hora_extra")
                            col1, col2 = st.columns(2)
                            with col1:
                                if st.button("Confirmar", use_container_width=True):
                                    if len(justificativa) < 15:
                                        st.error("Justificativa deve ter no m√≠nimo 15 caracteres.")
                                    else:
                                        cursor.execute("""
                                            UPDATE REGISTROS
                                            SET JUSTIFICATIVAHORAEXTRA = %s
                                            WHERE FUNCIONARIO_ID = %s AND DATA = %s
                                        """, (justificativa, usuario["id"], data_atual))
                                        conn.commit()
                                        st.session_state.dialog_open = False
                                        st.rerun()
                            with col2:
                                if st.button("Cancelar", use_container_width=True):
                                    st.session_state.dialog_open = False
                                    st.rerun()
                        if "dialog_open" not in st.session_state or not st.session_state.dialog_open:
                            st.session_state.dialog_open = True
                            dialog_justificativa()

    conn = conexao_persistente
    if not conn:
        st.error("Erro ao conectar ao banco de dados.")
        return

    if not verificar_ausencias(conn, usuario["id"]) or not verificar_restricoes_ponto(conn, usuario["id"]):
        return

    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.button("Chegada", on_click=registrar_ponto, args=("CHEGADA", conn), use_container_width=True, key="btn_chegada")
    with col2:
        st.button("Sa√≠da Almo√ßo", on_click=registrar_ponto, args=("SAIDA_ALMOCO", conn), use_container_width=True, key="btn_saida_almoco")
    with col3:
        st.button("Retorno Almo√ßo", on_click=registrar_ponto, args=("RETORNO_ALMOCO", conn), use_container_width=True, key="btn_retorno_almoco")
    with col4:
        st.button("Sa√≠da", on_click=registrar_ponto, args=("SAIDA", conn), use_container_width=True, key="btn_saida")

    # √Årea para mensagens ap√≥s os bot√µes
    mensagem_container = st.empty()

    # Exibir mensagens tempor√°rias
    if "mensagem_registro" in st.session_state:
        tipos = ["CHEGADA", "SAIDA_ALMOCO", "RETORNO_ALMOCO", "SAIDA"]
        for tipo in tipos:
            if tipo in st.session_state.mensagem_registro:
                mensagem = st.session_state.mensagem_registro[tipo]
                if mensagem == "already_registered":
                    mensagem_container.warning(f"‚ö†Ô∏è {tipo.replace('_', ' ').title()} j√° registrado!")
                    tm.sleep(1)
                    mensagem_container.empty()
                    del st.session_state.mensagem_registro[tipo]
                elif mensagem == "registered":
                    mensagem_container.success(f"‚úÖ {tipo.replace('_', ' ').title()} registrado!")
                    tm.sleep(1)
                    mensagem_container.empty()
                    del st.session_state.mensagem_registro[tipo]
                else:  # Mensagem de erro de valida√ß√£o
                    mensagem_container.warning(f"‚ö†Ô∏è {mensagem}")
                    tm.sleep(1)
                    mensagem_container.empty()
                    del st.session_state.mensagem_registro[tipo]

    with conn.cursor() as cursor:
        data_atual = datetime.now().date()
        cursor.execute("""
            SELECT CHEGADA, SAIDA_ALMOCO, RETORNO_ALMOCO, SAIDA
            FROM REGISTROS
            WHERE FUNCIONARIO_ID = %s AND DATA = %s
        """, (usuario["id"], data_atual))
        registros = cursor.fetchone() or (None, None, None, None)

        if any(registros[:4]):  # Verifica se h√° algum registro b√°sico
            st.markdown("<h1 style='text-align: center; font-size: 40px;'>Registros de Hoje:</h1>", unsafe_allow_html=True)
            df = pd.DataFrame([registros], columns=["Chegada", "Sa√≠da Almo√ßo", "Retorno Almo√ßo", "Sa√≠da"])
            df = df.applymap(lambda x: x.strftime("%H:%M:%S") if isinstance(x, time) else x if x else "N√£o registrado")
            st.dataframe(df, hide_index=True, use_container_width=True)

            total_horas = calcular_horas_diarias(registros, data_atual)
            total_segundos = int(total_horas.total_seconds())
            horas, resto = divmod(total_segundos, 3600)
            minutos, segundos = divmod(resto, 60)
            st.markdown(f"**Total de horas trabalhadas:** {horas:02d}:{minutos:02d}:{segundos:02d}")

        # Hist√≥rico dos √∫ltimos 7 dias
        with st.expander("Hist√≥rico dos √öltimos 7 Dias"):
            data_inicio = data_atual - timedelta(days=6)
            cursor.execute("""
                SELECT DATA, CHEGADA, SAIDA_ALMOCO, RETORNO_ALMOCO, SAIDA, HORAEXTRA
                FROM REGISTROS
                WHERE FUNCIONARIO_ID = %s AND DATA BETWEEN %s AND %s
                ORDER BY DATA DESC
            """, (usuario["id"], data_inicio, data_atual))
            historico = cursor.fetchall()

            if historico:
                df_historico = pd.DataFrame(historico, columns=["Data", "Chegada", "Sa√≠da Almo√ßo", "Retorno Almo√ßo", "Sa√≠da", "Horas Extras"])
                df_historico["Data"] = pd.to_datetime(df_historico["Data"]).dt.strftime("%d/%m/%Y")
                df_historico = df_historico.apply(lambda x: x.apply(lambda y: y.strftime("%H:%M:%S") if isinstance(y, time) else y if y else "N√£o registrado"), axis=1)
                st.dataframe(df_historico, hide_index=True, use_container_width=True)
            else:
                st.info("Nenhum registro nos √∫ltimos 7 dias.")



#Manuten√ß√£o do ponto caso o funcion√°rio n√£o esque√ßa de registrar o ponto

def tela_registro_ponto_manual():
    st.markdown("<h1 style='text-align: center;'>Registro de Ponto Manual</h1>", unsafe_allow_html=True)

    conn = conexao_persistente
    if not conn:
        st.error("N√£o foi poss√≠vel conectar ao banco de dados.")
        return

    # Carregar configura√ß√µes da empresa
    config_empresa = carregar_configuracoes_empresa()
    almoco_minimo = datetime.strptime(config_empresa["almoco_minimo"], "%H:%M:%S").time()
    limite_horas_normais = timedelta(
        hours=int(config_empresa["limite_horas_normais"].split(":")[0]),
        minutes=int(config_empresa["limite_horas_normais"].split(":")[1]),
        seconds=int(config_empresa["limite_horas_normais"].split(":")[2])
    )

    with conn.cursor() as cursor:
        cursor.execute("SELECT ID, NOME FROM FUNCIONARIOS WHERE ATIVO = TRUE ORDER BY NOME")
        funcionarios = cursor.fetchall()
        opcoes_funcionarios = {f"{nome}": id_func for id_func, nome in funcionarios}

        funcionario_selecionado = st.selectbox("Selecione o Funcion√°rio:", options=opcoes_funcionarios.keys())

        if not funcionario_selecionado:
            st.warning("Selecione um funcion√°rio para continuar.")
            return

        funcionario_id = opcoes_funcionarios[funcionario_selecionado]
        data_selecionada = st.date_input("Selecione a data do registro:", datetime.now().date(), format="DD/MM/YYYY")

        cursor.execute("""
            SELECT COUNT(*) FROM FERIAS
            WHERE FUNCIONARIO_ID = %s AND %s BETWEEN DATA_INICIO AND DATA_FIM
        """, (funcionario_id, data_selecionada))
        esta_de_ferias = cursor.fetchone()[0] > 0

        cursor.execute("""
            SELECT COUNT(*) FROM FALTAS
            WHERE FUNCIONARIO_ID = %s AND DATA = %s
        """, (funcionario_id, data_selecionada))
        falta_registrada = cursor.fetchone()[0] > 0

        if esta_de_ferias:
            st.warning("Este funcion√°rio est√° de f√©rias na data selecionada e n√£o pode registrar ponto.")
            return
        if falta_registrada:
            st.warning("Este funcion√°rio j√° possui uma falta registrada para a data selecionada.")
            return

        def calcular_horas_diarias(registros, data, hora_saida_proposta=None):
            if not registros or not registros[0]:  # Verifica se h√° chegada registrada
                return timedelta(0)
            chegada = datetime.combine(data, registros[0])
            saida = datetime.combine(data, hora_saida_proposta if hora_saida_proposta else (registros[3] if registros[3] else datetime.now().time()))
            total_horas = saida - chegada
            
            # Considerar intervalo de almo√ßo apenas se ambos Sa√≠da Almo√ßo e Retorno Almo√ßo estiverem registrados
            intervalo_almoco = timedelta(0)
            if registros[1] and registros[2]:
                intervalo_almoco = datetime.combine(data, registros[2]) - datetime.combine(data, registros[1])
                if intervalo_almoco < timedelta(hours=almoco_minimo.hour, minutes=almoco_minimo.minute, seconds=almoco_minimo.second):
                    intervalo_almoco = timedelta(hours=almoco_minimo.hour, minutes=almoco_minimo.minute, seconds=almoco_minimo.second)
            total_horas -= intervalo_almoco
            return total_horas

        def registrar_ponto_manual(tipo, cursor, conn):
            hora_base = st.time_input(f"{tipo.replace('_', ' ').title()}:", key=f"hora_{tipo}_{data_selecionada}")
            if st.button(f"{tipo.replace('_', ' ').title()}", key=f"btn_{tipo}_{data_selecionada}", use_container_width=True):
                try:
                    # Obter a data atual combinada com a hora_base
                    hora_datetime = datetime.combine(data_selecionada, hora_base)
                    # Pegar o tempo atual completo (com segundos) no momento do clique
                    hora_atual_completa = datetime.now()
                    # Combinar a hora_base com os segundos atuais
                    hora_com_segundo = hora_datetime.replace(
                        second=hora_atual_completa.second,
                        microsecond=hora_atual_completa.microsecond
                    )
                    hora_atual = hora_com_segundo.time()

                    # Buscar o valor anterior antes de registrar (exceto para SAIDA, que ser√° tratado no di√°logo)
                    if tipo.upper() != "SAIDA":
                        cursor.execute(f"""
                            SELECT {tipo.upper()}
                            FROM REGISTROS
                            WHERE FUNCIONARIO_ID = %s AND DATA = %s
                        """, (funcionario_id, data_selecionada))
                        valor_anterior = cursor.fetchone()[0] if cursor.rowcount > 0 else None

                        # Registrar o ponto (exceto SAIDA)
                        cursor.execute(f"""
                            INSERT INTO REGISTROS (FUNCIONARIO_ID, DATA, {tipo.upper()})
                            VALUES (%s, %s, %s)
                            ON CONFLICT (FUNCIONARIO_ID, DATA)
                            DO UPDATE SET {tipo.upper()} = EXCLUDED.{tipo.upper()}
                        """, (funcionario_id, data_selecionada, hora_atual))
                        conn.commit()

                        # Registrar a altera√ß√£o na tabela ALTERACOES_REGISTROS_PONTO
                        usuario_logado = st.session_state["usuario"]["nome"] if "usuario" in st.session_state else "Desconhecido"
                        cursor.execute("""
                            INSERT INTO ALTERACOES_REGISTROS_PONTO (FUNCIONARIO_ID, DATA, CAMPO_ALTERADO, VALOR_ANTERIOR, VALOR_NOVO, ALTERADO_POR)
                            VALUES (%s, %s, %s, %s, %s, %s)
                        """, (funcionario_id, data_selecionada, tipo.upper(), valor_anterior, hora_atual, usuario_logado))
                        conn.commit()

                    # Se for "SAIDA", calcular horas extras e solicitar justificativa antes de salvar qualquer coisa
                    if tipo.upper() == "SAIDA":
                        cursor.execute("""
                            SELECT CHEGADA, SAIDA_ALMOCO, RETORNO_ALMOCO, SAIDA
                            FROM REGISTROS
                            WHERE FUNCIONARIO_ID = %s AND DATA = %s
                        """, (funcionario_id, data_selecionada))
                        registros = cursor.fetchone()
                        total_horas = calcular_horas_diarias(registros, data_selecionada, hora_atual)

                        usuario_logado = st.session_state["usuario"]["nome"] if "usuario" in st.session_state else "Desconhecido"  # Definir aqui para passar ao di√°logo

                        if total_horas > limite_horas_normais:
                            horas_extras = total_horas - limite_horas_normais
                            horas_extras_str = f"{horas_extras.seconds // 3600:02}:{(horas_extras.seconds // 60) % 60:02}:{horas_extras.seconds % 60:02}"
                            def formatar_tempo(td):
                                total_segundos = int(td.total_seconds())
                                horas, resto = divmod(total_segundos, 3600)
                                minutos, segundos = divmod(resto, 60)
                                return f"{horas:02}:{minutos:02}:{segundos:02}"

                            @st.dialog("Justificativa para Hora Extra")
                            def dialog_justificativa(horas_extras_str=horas_extras_str, usuario_logado=usuario_logado):
                                st.write(f"Total de horas trabalhadas: {formatar_tempo(total_horas)}")
                                st.write(f"Horas extras calculadas: {formatar_tempo(horas_extras)}")
                                st.write("Voc√™ excedeu o limite de horas di√°rias. Justifique as horas extras.")
                                justificativa = st.text_area("Justificativa (m√≠n. 15 caracteres):", key=f"justificativa_hora_extra_{data_selecionada}")
                                col1, col2 = st.columns(2)
                                with col1:
                                    if st.button("Confirmar", key=f"confirmar_justificativa_{data_selecionada}", use_container_width=True):
                                        if len(justificativa) < 15:
                                            st.error("Justificativa deve ter no m√≠nimo 15 caracteres.")
                                        else:
                                            with conn.cursor() as new_cursor:
                                                # Registrar a sa√≠da e a hora extra apenas ap√≥s confirma√ß√£o
                                                new_cursor.execute("""
                                                    INSERT INTO REGISTROS (FUNCIONARIO_ID, DATA, SAIDA, HORAEXTRA, JUSTIFICATIVAHORAEXTRA)
                                                    VALUES (%s, %s, %s, %s, %s)
                                                    ON CONFLICT (FUNCIONARIO_ID, DATA)
                                                    DO UPDATE SET SAIDA = EXCLUDED.SAIDA, HORAEXTRA = EXCLUDED.HORAEXTRA, JUSTIFICATIVAHORAEXTRA = EXCLUDED.JUSTIFICATIVAHORAEXTRA
                                                """, (funcionario_id, data_selecionada, hora_atual, horas_extras_str, justificativa))
                                                # Registrar a altera√ß√£o na tabela ALTERACOES_REGISTROS_PONTO
                                                valor_anterior_saida = registros[3] if registros and registros[3] else None
                                                new_cursor.execute("""
                                                    INSERT INTO ALTERACOES_REGISTROS_PONTO (FUNCIONARIO_ID, DATA, CAMPO_ALTERADO, VALOR_ANTERIOR, VALOR_NOVO, ALTERADO_POR)
                                                    VALUES (%s, %s, %s, %s, %s, %s)
                                                """, (funcionario_id, data_selecionada, "SAIDA", valor_anterior_saida, hora_atual, usuario_logado))
                                                conn.commit()
                                            st.success("Sa√≠da e hora extra registradas com sucesso!")
                                            st.rerun()
                                with col2:
                                    if st.button("Cancelar", key=f"cancelar_justificativa_{data_selecionada}", use_container_width=True):
                                        st.info("Registro de sa√≠da e hora extra cancelado.")
                                        st.rerun()

                            dialog_justificativa(horas_extras_str=horas_extras_str, usuario_logado=usuario_logado)
                        else:
                            # Se n√£o houver horas extras, registrar apenas a sa√≠da
                            cursor.execute(f"""
                                INSERT INTO REGISTROS (FUNCIONARIO_ID, DATA, SAIDA)
                                VALUES (%s, %s, %s)
                                ON CONFLICT (FUNCIONARIO_ID, DATA)
                                DO UPDATE SET SAIDA = EXCLUDED.SAIDA
                            """, (funcionario_id, data_selecionada, hora_atual))
                            conn.commit()

                            usuario_logado = st.session_state["usuario"]["nome"] if "usuario" in st.session_state else "Desconhecido"
                            cursor.execute("""
                                INSERT INTO ALTERACOES_REGISTROS_PONTO (FUNCIONARIO_ID, DATA, CAMPO_ALTERADO, VALOR_ANTERIOR, VALOR_NOVO, ALTERADO_POR)
                                VALUES (%s, %s, %s, %s, %s, %s)
                            """, (funcionario_id, data_selecionada, "SAIDA", registros[3] if registros else None, hora_atual, usuario_logado))
                            conn.commit()

                    placeholder = st.empty()
                    placeholder.success(f"Registrado!", icon="‚úÖ")
                    tm.sleep(1)
                    placeholder.empty()

                except Exception as e:
                    st.error(f"Erro ao registrar {tipo}: {e}")

        col1, col2, col3, col4 = st.columns(4)
        with col1:
            registrar_ponto_manual("CHEGADA", cursor, conn)
        with col2:
            registrar_ponto_manual("SAIDA_ALMOCO", cursor, conn)
        with col3:
            registrar_ponto_manual("RETORNO_ALMOCO", cursor, conn)
        with col4:
            registrar_ponto_manual("SAIDA", cursor, conn)

        cursor.execute("""
            SELECT CHEGADA, SAIDA_ALMOCO, RETORNO_ALMOCO, SAIDA
            FROM REGISTROS
            WHERE FUNCIONARIO_ID = %s AND DATA = %s
        """, (funcionario_id, data_selecionada))
        registros = cursor.fetchone()

        if registros:
            st.markdown("<h2 style='text-align: center;'>Registros do Dia</h2>", unsafe_allow_html=True)
            df = pd.DataFrame([registros], columns=["Chegada", "Sa√≠da Almo√ßo", "Retorno Almo√ßo", "Sa√≠da"])
            df = df.applymap(lambda x: x.strftime("%H:%M:%S") if x else "N√£o registrado")
            st.dataframe(df, hide_index=True, use_container_width=True)
        else:
            st.info("Nenhum registro encontrado para a data selecionada.")

###
#Banco de horas
def tela_banco_horas():
    usuario = st.session_state["usuario"]
    st.markdown(f"<h1 style='text-align: center;'>Minhas Horas Extras</h1>", unsafe_allow_html=True)

    conn = conexao_persistente
    if conn:
        cursor = conexao_persistente.cursor()
        try:
            # Consulta ajustada para excluir valores nulos
            cursor.execute("""
                SELECT DATA, HORAEXTRA,JUSTIFICATIVAHORAEXTRA
                FROM REGISTROS
                WHERE FUNCIONARIO_ID = %s AND HORAEXTRA IS NOT NULL
                ORDER BY DATA
            """, (usuario["id"],))
            registros = cursor.fetchall()

            if registros:
                # Criando o DataFrame
                df = pd.DataFrame(registros, columns=["Data", "Hora Extra", "Justifivativa"])

                # Convertendo 'Data' para datetime e formatando como 'dd/mm/yyyy'
                df["Data"] = pd.to_datetime(df["Data"]).dt.strftime("%d/%m/%Y")

                # Convertendo 'Hora Extra' para string no formato 'HH:MM:SS'
                def format_hora_extra(time_value):
                    if isinstance(time_value, str):  # Caso j√° seja string no formato "HH:MM:SS"
                        return time_value
                    elif isinstance(time_value, time):  # Caso seja um objeto time
                        return time_value.strftime("%H:%M:%S")
                    else:
                        st.warning(f"Valor inesperado em Hora Extra: {time_value}")
                        return "00:00:00"

                df["Hora Extra"] = df["Hora Extra"].apply(format_hora_extra)

                # Definindo a coluna 'Data' como √≠ndice
                #df.set_index("Data", inplace=True)

                st.dataframe(df,hide_index=True,use_container_width=True)

                # Calculando o total de horas extras
                total_horas = timedelta()
                for hora in df["Hora Extra"]:
                    h, m, s = map(int, hora.split(":"))
                    total_horas += timedelta(hours=h, minutes=m, seconds=s)

                total_horas_em_horas = total_horas.total_seconds() / 3600 if total_horas else 0

                # Calculando dias adicionais (1 dia = 10 horas)
                dias_adicionais = int(total_horas_em_horas // 10)
                horas_restantes = total_horas_em_horas % 10

                # Calculando os minutos restantes ap√≥s a parte das horas
                minutos_restantes = (total_horas.total_seconds() % 3600) / 60

                # Exibindo horas extras como "X Dia(s) e HH:MM"
                if total_horas_em_horas >= 10:
                    horas_extras_display = f"{dias_adicionais} Dia(s) e {int(horas_restantes):02d}:{int(minutos_restantes):02d}"
                else:
                    horas_extras_display = f"{int(horas_restantes):02d}:{int(minutos_restantes):02d}"

                # Exibindo resultados
                st.markdown(f"**Horas Extras:** {horas_extras_display}")
            else:
                st.warning("Voc√™ n√£o tem horas extras!")
        except Exception as e:
            st.error(f"Erro ao executar a consulta: {e}")
    else:
        st.error("N√£o foi poss√≠vel conectar ao banco de dados.")


##
##Banco de horas ADM
def tela_banco_horas_admin():
    st.markdown(f"<h1 style='text-align: center;'>Banco de Horas</h1>", unsafe_allow_html=True)

    conn = conexao_persistente
    if conn:
        cursor = conexao_persistente.cursor()
        try:
            # Checkbox para incluir funcion√°rios inativos
            exibir_inativos = st.checkbox("Exibir Funcion√°rios Inativos", value=False)

            # Ajustar a query para incluir ou excluir inativos
            query = """
                SELECT f.NOME AS Funcionario, r.DATA, r.HORAEXTRA, r.justificativahoraextra
                FROM REGISTROS r
                JOIN FUNCIONARIOS f ON r.FUNCIONARIO_ID = f.ID
                WHERE r.HORAEXTRA IS NOT NULL
            """
            if not exibir_inativos:
                query += " AND f.ATIVO = TRUE"
            query += " ORDER BY f.NOME, r.DATA"

            cursor.execute(query)
            registros = cursor.fetchall()

            if registros:
                # Criando o DataFrame para exibir detalhes di√°rios
                df_detalhes = pd.DataFrame(registros, columns=["Funcion√°rio", "Data", "Hora Extra", "Justificativa"])

                # Convertendo 'Data' para datetime e formatando como 'dd/mm/yyyy'
                df_detalhes["Data"] = pd.to_datetime(df_detalhes["Data"]).dt.strftime("%d/%m/%Y")

                # Convertendo 'Hora Extra' para string no formato 'HH:MM:SS'
                def format_hora_extra(time_value):
                    if isinstance(time_value, str):
                        return time_value
                    elif isinstance(time_value, time):
                        return time_value.strftime("%H:%M:%S")
                    else:
                        return "00:00:00"

                df_detalhes["Hora Extra"] = df_detalhes["Hora Extra"].apply(format_hora_extra)

                # Filtro para selecionar um funcion√°rio espec√≠fico
                funcionarios_unicos = df_detalhes["Funcion√°rio"].unique()
                funcionario_selecionado = st.selectbox("Selecione um Funcion√°rio", options=funcionarios_unicos)

                # Filtrando o DataFrame com base no funcion√°rio selecionado
                df_filtrado = df_detalhes[df_detalhes["Funcion√°rio"] == funcionario_selecionado]

                # Exibindo o DataFrame filtrado de detalhes
                st.subheader("Detalhes por Dia")
                st.dataframe(df_filtrado, use_container_width=True, hide_index=True)

                # Bot√µes de download para o funcion√°rio filtrado
                col1, col2 = st.columns(2)
                with col1:
                    # Download em XLSX (filtrado)
                    buffer = BytesIO()
                    with pd.ExcelWriter(buffer, engine='openpyxl') as writer:
                        df_filtrado.to_excel(writer, index=False, sheet_name='Horas_Extras_Filtrado')
                        workbook = writer.book
                        worksheet = writer.sheets['Horas_Extras_Filtrado']
                        for column_cells in worksheet.columns:
                            length = max(len(str(cell.value or "")) for cell in column_cells)
                            col_letter = get_column_letter(column_cells[0].column)
                            worksheet.column_dimensions[col_letter].width = length + 2
                            for cell in column_cells:
                                cell.alignment = Alignment(horizontal='center', vertical='center')
                    buffer.seek(0)
                    st.download_button(
                        label="Baixar Filtrado em XLSX",
                        data=buffer,
                        file_name=f"Horas_Extras_{funcionario_selecionado}.xlsx",
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                        use_container_width=True
                    )

                with col2:
                    # Download em PDF (filtrado)
                    pdf = FPDF()
                    pdf.set_auto_page_break(auto=True, margin=15)
                    pdf.set_top_margin(15)  # Margem superior
                    pdf.add_page()
                    pdf.set_font("Arial", "B", 12)
                    
                    # Cabe√ßalho
                    config_empresa = carregar_configuracoes_empresa()
                    nome_empresa = config_empresa.get("nome", "Nome da Empresa")
                    data_emissao = datetime.now().strftime("%d/%m/%Y")
                    pdf.set_font("Arial", "", 9)  # Fonte menor para data
                    pdf.cell(0, 10, f"Data de Emiss√£o: {data_emissao}", ln=True, align="R")
                    pdf.set_font("Arial", "B", 12)
                    pdf.cell(0, 10, nome_empresa, ln=True, align="C")
                    pdf.ln(5)
                    
                    pdf.cell(0, 10, f"Horas Extras - {funcionario_selecionado}", ln=True, align="C")
                    pdf.ln(5)
                    
                    pdf.set_font("Arial", "B", 9)
                    pdf.cell(50, 7, "Funcion√°rio", 1, 0, "C")
                    pdf.cell(30, 7, "Data", 1, 0, "C")
                    pdf.cell(30, 7, "Hora Extra", 1, 0, "C")
                    pdf.cell(80, 7, "Justificativa", 1, 1, "C")
                    pdf.set_font("Arial", "", 9)
                    for _, row in df_filtrado.iterrows():
                        pdf.cell(50, 6, row["Funcion√°rio"], 1, 0, "C")
                        pdf.cell(30, 6, row["Data"], 1, 0, "C")
                        pdf.cell(30, 6, row["Hora Extra"], 1, 0, "C")
                        pdf.cell(80, 6, row["Justificativa"] if row["Justificativa"] else "", 1, 1, "C")
                    
                    pdf_buffer = BytesIO()
                    pdf_bytes = pdf.output(dest='S').encode('latin1')
                    pdf_buffer.write(pdf_bytes)
                    pdf_buffer.seek(0)
                    st.download_button(
                        label="Baixar Filtrado em PDF",
                        data=pdf_buffer,
                        file_name=f"Horas_Extras_{funcionario_selecionado}.pdf",
                        mime="application/pdf",
                        use_container_width=True
                    )

                # Criando o DataFrame para exibir totais por funcion√°rio
                total_horas_por_funcionario = {}
                for _, row in df_detalhes.iterrows():
                    funcionario = row["Funcion√°rio"]
                    h, m, s = map(int, row["Hora Extra"].split(":"))
                    horas_extras = timedelta(hours=h, minutes=m, seconds=s)
                    if funcionario in total_horas_por_funcionario:
                        total_horas_por_funcionario[funcionario] += horas_extras
                    else:
                        total_horas_por_funcionario[funcionario] = horas_extras

                # Preparando o DataFrame de totais
                totais_data = []
                for funcionario, total_timedelta in total_horas_por_funcionario.items():
                    total_horas = total_timedelta.total_seconds() / 3600
                    dias_adicionais = int(total_horas // 10)
                    horas_restantes = int(total_horas % 10)
                    minutos_restantes = int((total_timedelta.total_seconds() % 3600) / 60)
                    total_formatado = f"{dias_adicionais} Dia(s) e {horas_restantes:02d}:{minutos_restantes:02d}"
                    totais_data.append([funcionario, total_formatado])

                df_totais = pd.DataFrame(totais_data, columns=["Funcion√°rio", "Total de Horas Extras"])

                # Exibindo o DataFrame de totais
                st.subheader("Totais por Funcion√°rio")
                st.dataframe(df_totais, use_container_width=True, hide_index=True)

                # Bot√µes de download para totais
                col3, col4 = st.columns(2)
                with col3:
                    # Download em XLSX (totais)
                    buffer = BytesIO()
                    with pd.ExcelWriter(buffer, engine='openpyxl') as writer:
                        df_totais.to_excel(writer, index=False, sheet_name='Totais_Horas_Extras')
                        workbook = writer.book
                        worksheet = writer.sheets['Totais_Horas_Extras']
                        for column_cells in worksheet.columns:
                            length = max(len(str(cell.value or "")) for cell in column_cells)
                            col_letter = get_column_letter(column_cells[0].column)
                            worksheet.column_dimensions[col_letter].width = length + 2
                            for cell in column_cells:
                                cell.alignment = Alignment(horizontal='center', vertical='center')
                    buffer.seek(0)
                    st.download_button(
                        label="Baixar Totais em XLSX",
                        data=buffer,
                        file_name="Totais_Horas_Extras.xlsx",
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                        use_container_width=True
                    )

                with col4:
                    # Criar objeto PDF
                    pdf = FPDF()
                    pdf.set_auto_page_break(auto=True, margin=8)
                    pdf.set_top_margin(8)  # Margem superior
                    pdf.add_page()
                    pdf.set_font("Arial", "B", 12)

                    # Carregar informa√ß√µes da empresa
                    config_empresa = carregar_configuracoes_empresa()
                    nome_empresa = config_empresa.get("nome", "Nome da Empresa")
                    data_emissao = datetime.now().strftime("%d/%m/%Y")

                    # Definir coordenadas e tamanho do cabe√ßalho
                    x_margem = 10  # Margem lateral
                    y_margem = 10  # Margem superior do cabe√ßalho
                    largura = 190  # Largura do ret√¢ngulo (ajustado para alinhar no A4)
                    altura = 15    # Altura do ret√¢ngulo

                    # Criar ret√¢ngulo ao redor do cabe√ßalho
                    pdf.rect(x_margem, y_margem, largura, altura)

                    # Posicionar no topo do ret√¢ngulo
                    pdf.set_xy(x_margem, y_margem + 3)

                    # Nome da empresa (esquerda) e data (direita) na mesma linha
                    pdf.set_font("Arial", "B", 12)
                    pdf.cell(largura * 0.7, 5, nome_empresa, align="L")  # 70% da largura

                    pdf.set_font("Arial", "", 10)
                    pdf.cell(largura * 0.3, 5, f"Emiss√£o: {data_emissao}", align="R")  # 30% da largura

                    pdf.ln(10)  # Espa√ßo ap√≥s cabe√ßalho

                    # T√≠tulo do relat√≥rio
                    pdf.cell(0, 10, "Totais de Horas Extras por Funcion√°rio", ln=True, align="C")
                    pdf.ln(5)

                    
                    pdf.set_font("Arial", "B", 9)
                    pdf.cell(100, 7, "Funcion√°rio", 1, 0, "C")
                    pdf.cell(90, 7, "Total de Horas Extras", 1, 1, "C")
                    pdf.set_font("Arial", "", 9)
                    for _, row in df_totais.iterrows():
                        pdf.cell(100, 6, row["Funcion√°rio"], 1, 0, "C")
                        pdf.cell(90, 6, row["Total de Horas Extras"], 1, 1, "C")
                    
                    pdf_buffer = BytesIO()
                    pdf_bytes = pdf.output(dest='S').encode('latin1')
                    pdf_buffer.write(pdf_bytes)
                    pdf_buffer.seek(0)
                    st.download_button(
                        label="Baixar Totais em PDF",
                        data=pdf_buffer,
                        file_name="Totais_Horas_Extras.pdf",
                        mime="application/pdf",
                        use_container_width=True
                    )

            else:
                st.warning("Nenhum registro de horas extras encontrado.")
        except Exception as e:
            st.error(f"Erro ao executar a consulta: {e}")
    else:
        st.error("N√£o foi poss√≠vel conectar ao banco de dados.")

# Fun√ß√£o para gerar o hash de uma senha
def gerar_hash_senha(senha):
    return hashlib.sha256(senha.encode()).hexdigest()

# Fun√ß√£o para alterar a senha
def alterar_senha():
    st.markdown("<h1 style='text-align: center;'>Altera√ß√£o de Senha</h1>", unsafe_allow_html=True)

    if "usuario" not in st.session_state:
        st.warning("Fa√ßa login para acessar esta √°rea.")
        return

    usuario = st.session_state["usuario"]
    with st.form(key="alterar_senha_form"):
        senha_atual = st.text_input("Senha Atual", type="password")
        nova_senha = st.text_input("Nova Senha", type="password")
        confirmar_senha = st.text_input("Confirmar Nova Senha", type="password")
        submit_button = st.form_submit_button("Alterar Senha", use_container_width=True)

        if submit_button:
            if not senha_atual or not nova_senha or not confirmar_senha:
                st.error("Por favor, preencha todos os campos.")
                return

            if len(nova_senha) < 4:  # Verificar se a nova senha tem pelo menos 4 caracteres
                st.error("A nova senha deve ter pelo menos 4 caracteres.")
                return

            if nova_senha != confirmar_senha:
                st.error("A nova senha e a confirma√ß√£o n√£o coincidem.")
                return

            conn = conexao_persistente
            if conn:
                cursor = conexao_persistente.cursor()

                # Verificar se a senha atual est√° correta
                cursor.execute("""
                    SELECT senha
                    FROM funcionarios
                    WHERE id = %s
                """, (usuario["id"],))
                registro = cursor.fetchone()

                if not registro or registro[0] != gerar_hash_senha(senha_atual):
                    st.error("Senha atual incorreta.")
                else:
                    # Atualizar a senha no banco de dados
                    nova_senha_hash = gerar_hash_senha(nova_senha)
                    cursor.execute("""
                        UPDATE funcionarios
                        SET senha = %s
                        WHERE id = %s
                    """, (nova_senha_hash, usuario["id"]))
                    conn.commit()
                    st.success("Senha alterada com sucesso!")
            else:
                st.error("Erro ao conectar ao banco de dados.")

#######################################################################
#Valida√ß√µes do Cadastro
#######################################################################

def limpar_texto(texto, campo, tamanho_max):
    """Remove espa√ßos extras e limita o tamanho do texto."""
    if not texto:
        return ""
    texto_limpo = " ".join(texto.split()).strip()
    if len(texto_limpo) > tamanho_max:
        st.warning(f"O campo '{campo}' foi truncado para {tamanho_max} caracteres.")
        return texto_limpo[:tamanho_max]
    return texto_limpo

def username_em_uso(username):
    """Verifica se o username j√° est√° em uso no banco."""
    conn = conexao_persistente
    with conn.cursor() as cursor:
        cursor.execute("SELECT COUNT(*) FROM FUNCIONARIOS WHERE USERNAME = %s", (username,))
        return cursor.fetchone()[0] > 0

def validar_email(email):
    """Valida o formato do e-mail com uma regex simples."""
    if not email:
        return False
    return bool(re.match(r"[^@]+@[^@]+\.[^@]+", email))



###################################################
#Fun√ß√£o de manuten√ß√£o do cadastro de funcino√°rios
###################################################
def tela_manutencao_funcionarios():
    st.markdown("<h1 style='text-align: center;'>Manuten√ß√£o de Funcion√°rios</h1>", unsafe_allow_html=True)

    # For√ßar a limpeza do cache ao iniciar a tela
    if "cache_cleared" not in st.session_state:
        st.cache_data.clear()
        st.session_state["cache_cleared"] = True

    # Inicializar estados necess√°rios se n√£o existirem
    if "alterar_dados" not in st.session_state:
        st.session_state.alterar_dados = True
    if "alterar_senha" not in st.session_state:
        st.session_state.alterar_senha = False
    if "cadastro_atual" not in st.session_state:
        st.session_state.cadastro_atual = False

    conn = conexao_persistente
    if not conn:
        st.error("Erro ao conectar ao banco de dados.")
        return

    try:
        with conn.cursor() as cursor:
            cursor.execute("SELECT ID, NOME, USERNAME, EMAIL, DTCONTRATACAO, CARGO, ATIVO FROM FUNCIONARIOS ORDER BY NOME")
            usuarios = cursor.fetchall()
    except Exception as e:
        st.error(f"Erro ao listar usu√°rios: {e}")
        return

    if not usuarios:
        st.warning("Nenhum funcion√°rio encontrado.")
        return

    df_usuarios = pd.DataFrame(usuarios, columns=["ID", "Nome", "Username", "Email", "DtContratacao", "Cargo", "Ativo"])
    funcionarios_unicos = df_usuarios["Nome"].unique()
    funcionario_selecionado = st.selectbox("Selecione um Funcion√°rio", options=funcionarios_unicos)

    df_filtrado = df_usuarios[df_usuarios["Nome"] == funcionario_selecionado]
    if df_filtrado.empty:
        st.warning("Funcion√°rio n√£o encontrado.")
        return

    funcionario = df_filtrado.iloc[0]
    id_usuario = int(funcionario["ID"])
    nome_atual = funcionario["Nome"]
    username_atual = funcionario["Username"]
    email_atual = funcionario["Email"]
    dt_contratacao_atual = funcionario["DtContratacao"]
    cargo_atual = funcionario["Cargo"] or ""
    ativo_atual = True if pd.isna(funcionario["Ativo"]) else bool(funcionario["Ativo"])

    # Atualizar valores no session_state ao trocar de usu√°rio
    if "usuario_selecionado" not in st.session_state or st.session_state.usuario_selecionado != funcionario_selecionado:
        st.session_state.usuario_selecionado = funcionario_selecionado
        st.session_state.ativo_atual = ativo_atual

    col1, col2 = st.columns(2)
    with col1:
        alterar_dados = st.checkbox(
            "Alterar Dados Cadastrais",
            value=st.session_state.alterar_dados,
            key="alterar_dados",
            on_change=lambda: st.session_state.update({"alterar_dados": True, "alterar_senha": False})
        )
    with col2:
        alterar_senha = st.checkbox(
            "Alterar Senha",
            value=st.session_state.alterar_senha,
            key="alterar_senha",
            on_change=lambda: st.session_state.update({"alterar_senha": True, "alterar_dados": False})
        )

    if alterar_dados:
        with st.form("form_dados_cadastrais"):
            novo_nome = st.text_input("Nome do Funcion√°rio", value=nome_atual, max_chars=100)
            novo_username = st.text_input("Nome de Usu√°rio", value=username_atual, max_chars=50)
            novo_cargo = st.text_input("Cargo do Funcion√°rio", value=cargo_atual, max_chars=50)
            novo_email = st.text_input("Email", value=email_atual, max_chars=100)
            nova_dt_contratacao = st.date_input(
                "Data de Contrata√ß√£o",
                value=dt_contratacao_atual or datetime.today().date(),
                format='DD/MM/YYYY'
            )
            novo_ativo = st.checkbox("Func. Ativo", value=st.session_state.ativo_atual, key="checkbox_ativo")

            submit_button = st.form_submit_button("Salvar Altera√ß√µes", use_container_width=True)

            if submit_button:
                erros = []
                novo_nome = limpar_texto(novo_nome, "nome", 100)
                novo_username = limpar_texto(novo_username, "username", 50)
                novo_cargo = limpar_texto(novo_cargo, "cargo", 50)

                if not novo_nome or len(novo_nome.split()) < 2:
                    erros.append("‚ùå O nome deve conter pelo menos um sobrenome.")
                if not novo_username:
                    erros.append("‚ùå O nome de usu√°rio √© obrigat√≥rio.")
                elif novo_username != username_atual and username_em_uso(novo_username):
                    erros.append("‚ùå Este nome de usu√°rio j√° est√° em uso.")
                if not novo_cargo:
                    erros.append("‚ùå O cargo √© obrigat√≥rio.")
                if not validar_email(novo_email):
                    erros.append("‚ùå O email informado √© inv√°lido.")
                with conn.cursor() as cursor:
                    cursor.execute("SELECT COUNT(*) FROM FUNCIONARIOS WHERE EMAIL = %s AND ID != %s", (novo_email, id_usuario))
                    if cursor.fetchone()[0] > 0:
                        erros.append("‚ùå Este email j√° est√° em uso por outro funcion√°rio.")

                if erros:
                    for erro in erros:
                        st.error(erro)
                else:
                    @st.dialog("Confirma√ß√£o")
                    def confirmar_alteracao():
                        st.write("Deseja salvar as altera√ß√µes?")
                        col1, col2 = st.columns(2)
                        with col1:
                            if st.button("Sim", use_container_width=True):
                                try:
                                    with conn.cursor() as cursor:
                                        usuario_logado = st.session_state["usuario"]["nome"] if "usuario" in st.session_state else "Desconhecido"
                                        cursor.execute("""
                                            UPDATE FUNCIONARIOS 
                                            SET NOME = %s, USERNAME = %s, EMAIL = %s, DTCONTRATACAO = %s, CARGO = %s, ATIVO = %s, ULTIMA_ALTERACAO_POR = %s
                                            WHERE ID = %s
                                        """, (novo_nome, novo_username, novo_email, nova_dt_contratacao, novo_cargo, novo_ativo, usuario_logado, id_usuario))
                                        campos_alterados = {
                                            "NOME": (nome_atual, novo_nome),
                                            "USERNAME": (username_atual, novo_username),
                                            "EMAIL": (email_atual, novo_email),
                                            "CARGO": (cargo_atual, novo_cargo),
                                            "DTCONTRATACAO": (dt_contratacao_atual, nova_dt_contratacao),
                                            "ATIVO": (ativo_atual, novo_ativo)
                                        }
                                        for campo, (anterior, novo) in campos_alterados.items():
                                            if str(anterior) != str(novo):
                                                cursor.execute("""
                                                    INSERT INTO ALTERACOES_FUNCIONARIOS (FUNCIONARIO_ID, ALTERADO_POR, CAMPO_ALTERADO, VALOR_ANTERIOR, VALOR_NOVO)
                                                    VALUES (%s, %s, %s, %s, %s)
                                                """, (id_usuario, usuario_logado, campo, str(anterior), str(novo)))
                                        conn.commit()
                                    st.cache_data.clear()
                                    st.session_state["cache_cleared"] = False
                                    st.session_state.ativo_atual = novo_ativo
                                    st.success("‚úÖ Dados atualizados com sucesso!")
                                    tm.sleep(1)
                                    st.rerun()
                                except Exception as e:
                                    conn.rollback()
                                    st.error(f"‚ùå Erro ao atualizar os dados: {e}")
                        with col2:
                            if st.button("N√£o", use_container_width=True):
                                st.info("Altera√ß√µes canceladas.")

                    confirmar_alteracao()

    if alterar_senha:
        with st.form("form_alterar_senha"):
            nova_senha = st.text_input("Digite a nova senha", type="password", max_chars=100)
            confirmar_senha = st.text_input("Confirme a nova senha", type="password", max_chars=100, key="confirmar_senha_manutencao")

            submit_senha = st.form_submit_button("Alterar Senha", use_container_width=True)

            if submit_senha:
                erros = []
                if not nova_senha or len(nova_senha) < 6:
                    erros.append("‚ùå A senha deve ter pelo menos 6 caracteres.")
                if nova_senha != confirmar_senha:
                    erros.append("‚ùå As senhas n√£o coincidem.")

                if erros:
                    for erro in erros:
                        st.error(erro)
                else:
                    @st.dialog("Confirma√ß√£o")
                    def confirmar_senha():
                        st.write("Deseja alterar a senha?")
                        col1, col2 = st.columns(2)
                        with col1:
                            if st.button("Sim", use_container_width=True):
                                with st.spinner("Alterando senha..."):
                                    try:
                                        with conn.cursor() as cursor:
                                            usuario_logado = st.session_state["usuario"]["nome"] if "usuario" in st.session_state else "Desconhecido"
                                            cursor.execute("UPDATE FUNCIONARIOS SET SENHA = %s, ULTIMA_ALTERACAO_POR = %s WHERE ID = %s",
                                                           (criptografar_senha(nova_senha), usuario_logado, id_usuario))
                                            cursor.execute("""
                                                INSERT INTO ALTERACOES_FUNCIONARIOS (FUNCIONARIO_ID, ALTERADO_POR, CAMPO_ALTERADO, VALOR_ANTERIOR, VALOR_NOVO)
                                                VALUES (%s, %s, %s, %s, %s)
                                            """, (id_usuario, usuario_logado, "SENHA", "****", "****"))
                                            conn.commit()
                                        st.cache_data.clear()
                                        placeholder = st.empty()
                                        placeholder.success("‚úÖ Senha alterada com sucesso!")
                                        tm.sleep(2)
                                        placeholder.empty()
                                        st.rerun()
                                    except Exception as e:
                                        conn.rollback()
                                        st.error(f"‚ùå Erro ao atualizar a senha: {e}")
                        with col2:
                            if st.button("N√£o", use_container_width=True):
                                st.info("Altera√ß√£o de senha cancelada.")

                    confirmar_senha()


#####################################
#Tela para gerenciar os acessos
#####################################

def tela_gerenciar_permissoes():
    st.markdown("<h1 style='text-align: center;'>Gerenciar Acessos</h1>", unsafe_allow_html=True)

    conn = conexao_persistente
    if not conn:
        st.error("N√£o foi poss√≠vel conectar ao banco de dados.")
        return

    usuario = st.session_state.get("usuario", {})
    if not usuario.get("gerenciar_permissoes"):
        st.warning("Voc√™ n√£o tem permiss√£o para gerenciar permiss√µes de usu√°rios.")
        return

    try:
        with conn.cursor() as cursor:
            # Listar todos os funcion√°rios ativos com suas permiss√µes
            cursor.execute("""
                SELECT ID, NOME, ADMINISTRADOR, CADASTRO, AGENDAMENTO, EDITA_PONTO, AUDITORIA, GERENCIAR_PERMISSOES
                FROM FUNCIONARIOS
                WHERE ATIVO = TRUE
                ORDER BY NOME
            """)
            funcionarios = cursor.fetchall()

            if not funcionarios:
                st.warning("Nenhum funcion√°rio ativo encontrado.")
                return

            # Criar DataFrame original para compara√ß√£o posterior
            df_original = pd.DataFrame(funcionarios, columns=[
                "ID", "Nome", "Administrador", "Cadastro", "Agendamento", "Edita Ponto", "Auditoria", "Gerenciar Permiss√µes"
            ])
            df = df_original.copy()  # C√≥pia para exibi√ß√£o e edi√ß√£o
            df = df.replace({'1': True, '0': False})  # Converter para booleanos

            # Criar lista de nomes para o selectbox, incluindo uma op√ß√£o vazia
            nomes_funcionarios = [""] + [func[1] for func in funcionarios]  # "" representa "Todos"

            # Selectbox para escolher o funcion√°rio
            usuario_selecionado = st.selectbox(
                "Selecione um funcion√°rio (deixe em branco para ver todos):",
                options=nomes_funcionarios,
                index=0  # Come√ßa com a op√ß√£o vazia selecionada
            )

            # Filtrar o DataFrame se um usu√°rio for selecionado
            if usuario_selecionado:
                df = df[df["Nome"] == usuario_selecionado]

            # Configura√ß√£o do data_editor
            edited_df = st.data_editor(
                df,
                column_config={
                    "ID": None,
                    #"ID": st.column_config.NumberColumn("ID", disabled=True),
                    "Nome": st.column_config.TextColumn("Funcion√°rio", disabled=True),
                    "Administrador": st.column_config.CheckboxColumn("Admin"),
                    "Cadastro": st.column_config.CheckboxColumn("Cadastro"),
                    "Agendamento": st.column_config.CheckboxColumn("Agenda"),
                    "Edita Ponto": st.column_config.CheckboxColumn("Editar Ponto"),
                    "Auditoria": st.column_config.CheckboxColumn("Auditoria"),
                    "Gerenciar Permiss√µes": st.column_config.CheckboxColumn("Acessos"),
                },
                hide_index=True,
                use_container_width=True,
            )

            # Bot√£o para salvar altera√ß√µes
            if st.button("Salvar Altera√ß√µes", use_container_width=True):
                usuario_logado = usuario["nome"]
                alteracoes_realizadas = False  # Flag para verificar se houve altera√ß√µes

                for _, row in edited_df.iterrows():
                    # Encontrar a linha correspondente no df_original usando o ID
                    original_row = df_original[df_original["ID"] == row["ID"]].iloc[0]
                    
                    # Verificar se houve altera√ß√µes
                    permissoes_alteradas = {
                        "Administrador": row["Administrador"] != (original_row["Administrador"] == '1'),
                        "Cadastro": row["Cadastro"] != (original_row["Cadastro"] == '1'),
                        "Agendamento": row["Agendamento"] != (original_row["Agendamento"] == '1'),
                        "Edita Ponto": row["Edita Ponto"] != (original_row["Edita Ponto"] == '1'),
                        "Auditoria": row["Auditoria"] != (original_row["Auditoria"] == '1'),
                        "Gerenciar Permiss√µes": row["Gerenciar Permiss√µes"] != (original_row["Gerenciar Permiss√µes"] == '1')
                    }

                    if any(permissoes_alteradas.values()):  # Se houve alguma altera√ß√£o
                        alteracoes_realizadas = True
                        cursor.execute("""
                            UPDATE FUNCIONARIOS
                            SET ADMINISTRADOR = %s, CADASTRO = %s, AGENDAMENTO = %s, EDITA_PONTO = %s, AUDITORIA = %s, GERENCIAR_PERMISSOES = %s
                            WHERE ID = %s
                        """, (
                            '1' if row["Administrador"] else '0',
                            '1' if row["Cadastro"] else '0',
                            '1' if row["Agendamento"] else '0',
                            '1' if row["Edita Ponto"] else '0',
                            '1' if row["Auditoria"] else '0',
                            '1' if row["Gerenciar Permiss√µes"] else '0',
                            row["ID"]
                        ))

                        # Registrar altera√ß√µes na tabela ALTERACOES_FUNCIONARIOS
                        for col, alterado in permissoes_alteradas.items():
                            if alterado:
                                cursor.execute("""
                                    INSERT INTO ALTERACOES_FUNCIONARIOS (
                                        FUNCIONARIO_ID, ALTERADO_POR, CAMPO_ALTERADO, VALOR_ANTERIOR, VALOR_NOVO, DATA_ALTERACAO
                                    ) VALUES (%s, %s, %s, %s, %s, %s)
                                """, (
                                    row["ID"],
                                    usuario_logado,
                                    col.upper(),
                                    original_row[col],  # Valor anterior direto do banco
                                    '1' if row[col] else '0',  # Valor novo
                                    datetime.now()
                                ))

                if alteracoes_realizadas:
                    conn.commit()
                    st.success("Acesso alterado! Logon do usu√°rio necess√°io!")
                    tm.sleep(2)                    
                    st.rerun()
                else:
                    st.info("Nenhuma altera√ß√£o detectada para salvar.")
                
    except psycopg2.Error as e:
        conn.rollback()  # Rollback em caso de erro no banco
        st.error(f"Erro no banco de dados: {e}")
    except Exception as e:
        conn.rollback()  # Rollback em caso de erro gen√©rico
        st.error(f"Erro inesperado: {e}")

#Gerar o PDF dos funcionarios cadastrados
#
def gerar_pdf_funcionarios(df):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", "B", 12)
    pdf.cell(0, 10, "Lista de Funcion√°rios", ln=True, align="C")
    pdf.ln(5)

    pdf.set_font("Arial", "B", 9)
    pdf.cell(50, 7, "Nome", 1, 0, "C")
    pdf.cell(40, 7, "Cargo", 1, 0, "C")  
    pdf.cell(50, 7, "Email", 1, 0, "C")
    pdf.cell(30, 7, "Data Contrata√ß√£o", 1, 0, "C")
    pdf.cell(20, 7, "Ativo", 1, 1, "C")

    pdf.set_font("Arial", "", 9)
    for _, row in df.iterrows():
        pdf.cell(50, 6, row["Nome"], 1)
        pdf.cell(40, 6, row["Cargo"], 1, 0, "C")  
        pdf.cell(50, 6, row["Email"], 1, 0, "C")
        pdf.cell(30, 6, row["Data Contrata√ß√£o"] if pd.notnull(row["Data Contrata√ß√£o"]) else "N√£o informado", 1, 0, "C")
        pdf.cell(20, 6, "Sim" if row["Ativo"] else "N√£o", 1, 1, "C")

    temp_file = tempfile.NamedTemporaryFile(delete=False, suffix=".pdf")
    pdf.output(temp_file.name)
    return temp_file.name

def tela_listar_funcionarios():
    """Tela administrativa para listar todos os funcion√°rios com exporta√ß√£o em XLSX e PDF."""
    if "usuario" not in st.session_state or not st.session_state["usuario"].get("administrador"):
        st.warning("Acesso restrito a administradores.")
        return

    st.markdown("<h1 style='text-align: center;'>Lista de Funcion√°rios</h1>", unsafe_allow_html=True)

    # Checkbox para exibir funcion√°rios inativos
    
    exibir_inativos = st.checkbox("Exibir Funcion√°rios Inativos", value=False)

    conn = conexao_persistente
    if not conn:
        st.error("Erro ao conectar ao banco de dados.")
        return

    try:
        with conn.cursor() as cursor:
            # Ajustar query para incluir ou excluir inativos com base no checkbox
            query = """
                SELECT ATIVO, NOME, CARGO, COALESCE(TO_CHAR(DTCONTRATACAO, 'DD/MM/YYYY'), 'N√£o informado'), EMAIL
                FROM FUNCIONARIOS
                WHERE ATIVO = %s OR %s = True
                ORDER BY ATIVO, NOME
            """
            cursor.execute("ROLLBACK")
            cursor.execute(query, (not exibir_inativos, exibir_inativos))
            registros = cursor.fetchall()

            if registros:
                df = pd.DataFrame(registros, columns=["Ativo","Nome", "Cargo","Data Contrata√ß√£o", "Email"])
                st.dataframe(df, hide_index=True, use_container_width=True)

                col1, col2 = st.columns(2)
                with col1:
                    # Download em XLSX com colunas ajustadas automaticamente e texto centralizado
                    buffer = BytesIO()
                    with pd.ExcelWriter(buffer, engine='openpyxl') as writer:
                        df.to_excel(writer, index=False, sheet_name='Funcionarios')
                        workbook = writer.book
                        worksheet = writer.sheets['Funcionarios']
                        
                        # Ajustar largura das colunas automaticamente
                        for column_cells in worksheet.columns:
                            length = max(len(str(cell.value or "")) for cell in column_cells)
                            col_letter = get_column_letter(column_cells[0].column)
                            worksheet.column_dimensions[col_letter].width = length + 2  # Adicionar margem
                            # Centralizar o texto
                            for cell in column_cells:
                                cell.alignment = Alignment(horizontal='center', vertical='center')

                    buffer.seek(0)
                    st.download_button(
                        label="Baixar em Excel",
                        data=buffer.getvalue(),
                        file_name="Lista_Funcionarios.xlsx",
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                        use_container_width=True
                    )
                with col2:
                    pdf_file = gerar_pdf_funcionarios(df)
                    with open(pdf_file, "rb") as f:
                        st.download_button(
                            label="Baixar em PDF",
                            data=f,
                            file_name="Lista_Funcionarios.pdf",
                            mime="application/pdf",
                            use_container_width=True
                        )
                    os.remove(pdf_file)
            else:
                st.info("Nenhum funcion√°rio cadastrado.")
    except Exception as e:
        st.error(f"Erro ao listar funcion√°rios: {e}")


# Fun√ß√£o para verificar complexidade da senha
def validar_senha_complexa(senha):
    """Verifica se a senha atende a crit√©rios de complexidade."""
    if not re.search(r"[A-Z]", senha):
        return False, "A senha deve conter pelo menos uma letra mai√∫scula."
    if not re.search(r"[0-9]", senha):
        return False, "A senha deve conter pelo menos um n√∫mero."
    if not re.search(r"[!@#$%^&*(),.?\":{}|<>]", senha):
        return False, "A senha deve conter pelo menos um caractere especial."
    return True, ""

# Fun√ß√£o para limpar entradas (mantida igual)
def limpar_texto(valor, tipo, max_length):
    """Remove caracteres inv√°lidos e limita o tamanho do campo."""
    if not valor:
        return ""
    if tipo in ["nome", "cargo"]:
        valor = re.sub(r"[^A-Za-z√Ä-√ñ√ò-√∂√∏-√ø\s]", "", valor)
    elif tipo == "username":
        valor = re.sub(r"[^A-Za-z0-9]", "", valor)
    return valor[:max_length]

# Fun√ß√£o para validar email (mantida igual)
def validar_email(valor):
    """Valida se o email est√° no formato correto."""
    if not valor or len(valor) > 100:
        return False
    return bool(re.fullmatch(r"^[\w\.-]+@[\w\.-]+\.\w+$", valor))

# Fun√ß√£o para verificar username com cache
@st.cache_data(ttl=300)  # Cache por 5 minutos
def username_em_uso(username):
    """Verifica se o username j√° est√° em uso no banco de dados."""
    conn = conexao_persistente
    if not conn:
        return False
    try:
        with conn.cursor() as cursor:
            cursor.execute("SELECT COUNT(*) FROM funcionarios WHERE username = %s", (username,))
            return cursor.fetchone()[0] > 0
    except Exception:
        return False
    
#########################################
#Tela para cadastrar funcion√°rios
##########################################
def cadastrar_funcionarios():
    st.markdown("<h1 style='text-align: center;'>Cadastrar Funcion√°rio</h1>", unsafe_allow_html=True)

    conn = conexao_persistente
    if not conn:
        st.error("N√£o foi poss√≠vel conectar ao banco de dados.")
        return

    if "usuario" not in st.session_state or not st.session_state["usuario"].get("cadastro"):
        st.warning("Acesso restrito a usu√°rios com permiss√£o de cadastro.")
        return

    @st.dialog("Confirmar Cadastro")
    def confirmar_cadastro(nome, username, email, cargo, dtcontratacao, senha):
        st.write(f"Voc√™ est√° prestes a cadastrar o funcion√°rio {nome}. Confirme os dados:")
        st.write(f"Nome: {nome}")
        st.write(f"Usu√°rio: {username}")
        st.write(f"E-mail: {email}")
        st.write(f"Cargo: {cargo}")
        st.write(f"Data de Contrata√ß√£o: {dtcontratacao.strftime('%d/%m/%Y')}")
        col1, col2 = st.columns(2)
        with col1:
            if st.button("Confirmar", use_container_width=True):
                try:
                    with conn.cursor() as cursor:
                        senha_criptografada = criptografar_senha(senha)
                        cursor.execute("""
                            INSERT INTO FUNCIONARIOS (NOME, USERNAME, EMAIL, CARGO, DTCONTRATACAO, SENHA, ATIVO)
                            VALUES (%s, %s, %s, %s, %s, %s, TRUE)
                        """, (nome, username, email, cargo, dtcontratacao, senha_criptografada))
                        conn.commit()
                        st.session_state["dialog_open"] = False
                        st.rerun()
                except psycopg2.Error as e:
                    conn.rollback()
                    st.error(f"Erro ao cadastrar funcion√°rio: {e}")
        with col2:
            if st.button("Cancelar", use_container_width=True):
                st.session_state["dialog_open"] = False
                st.rerun()

    with st.form(key="form_cadastro"):
        novo_nome = st.text_input("Nome Completo")
        novo_username = st.text_input("Nome de Usu√°rio")
        
        col1, col2 = st.columns(2)
        with col1:
            novo_cargo = st.text_input("Cargo")
        with col2:
            dtcontratacao = st.date_input("Data de Contrata√ß√£o", format="DD/MM/YYYY")
        col3, col4 = st.columns(2)
        with col3:
            senha = st.text_input("Senha", type="password")
        with col4:
            confirmar_senha = st.text_input("Confirme a Senha", type="password") 
        novo_email = st.text_input("E-mail")
        
        submit_button = st.form_submit_button("Cadastrar", use_container_width=True)

        if submit_button:
            erros = []
            novo_nome = limpar_texto(novo_nome, "nome", 100)
            novo_username = limpar_texto(novo_username, "username", 50)
            novo_cargo = limpar_texto(novo_cargo, "cargo", 50)

            if not novo_nome or len(novo_nome.split()) < 2:
                erros.append("‚ùå O nome deve conter pelo menos um sobrenome.")
            if not novo_username:
                erros.append("‚ùå O nome de usu√°rio √© obrigat√≥rio.")
            elif username_em_uso(novo_username):
                erros.append("‚ùå Este nome de usu√°rio j√° est√° em uso.")
            if not novo_cargo:
                erros.append("‚ùå O cargo √© obrigat√≥rio.")
            if not validar_email(novo_email):
                erros.append("‚ùå O e-mail informado √© inv√°lido.")
            with conn.cursor() as cursor:
                cursor.execute("SELECT COUNT(*) FROM FUNCIONARIOS WHERE EMAIL = %s", (novo_email,))
                if cursor.fetchone()[0] > 0:
                    erros.append("‚ùå Este e-mail j√° est√° em uso por outro funcion√°rio.")
            if not senha:
                erros.append("‚ùå A senha √© obrigat√≥ria.")
            elif len(senha) < 6:
                erros.append("‚ùå A senha deve ter pelo menos 6 caracteres.")
            elif senha != confirmar_senha:
                erros.append("‚ùå As senhas n√£o coincidem.")

            if erros:
                for erro in erros:
                    st.error(erro)
            else:
                if "dialog_open" not in st.session_state or not st.session_state["dialog_open"]:
                    st.session_state["dialog_open"] = True
                    confirmar_cadastro(novo_nome, novo_username, novo_email, novo_cargo, dtcontratacao, senha)


#########################################
#Tela para exbir as faltas dos funcion√°rios
##########################################
def tela_admin_faltas():
    st.markdown("<h1 style='text-align: center;'>Faltas Registradas</h1>", unsafe_allow_html=True)

    # Conex√£o com o banco de dados
    conn = conexao_persistente
    if not conn:
        st.error("Erro na conex√£o com o banco de dados.")
        return

    with conn.cursor() as cursor:
        cursor.execute("ROLLBACK")
        cursor.execute("""
            SELECT F.FUNCIONARIO_ID, F.DATA, F.JUSTIFICATIVA, F.DOCUMENTO, FUNC.NOME
            FROM FALTAS F
            JOIN FUNCIONARIOS FUNC ON F.FUNCIONARIO_ID = FUNC.ID
            ORDER BY F.DATA DESC
        """)
        registros = cursor.fetchall()

        if registros:
            # Criar dataframe para exibi√ß√£o
            dados = []
            documentos = []  # Lista para armazenar documentos e informa√ß√µes associadas

            for registro in registros:
                id_funcionario, data, justificativa, documento, nome = registro
                possui_documento = "Sim" if documento else "N√£o"
                dados.append({
                    "X": False,
                    "Data": data.strftime("%d/%m/%Y"),
                    "Funcion√°rio": nome,
                    "Justificativa": justificativa,
                    "Anexo": possui_documento
                })
                documentos.append({
                    "Funcion√°rio": nome,
                    "Data": data.strftime("%d/%m/%Y"),
                    "Anexo": documento
                })

            # Criar dataframe
            df = pd.DataFrame(dados)

            # Filtros em colunas
            col1, col2, col3 = st.columns(3)
            with col1:
                # Filtro de funcion√°rios com m√∫ltipla sele√ß√£o
                funcionarios = df["Funcion√°rio"].unique()
                funcionarios_selecionados = st.multiselect("Selecione os Funcion√°rios", options=funcionarios, default=[])
            with col2:
                # Filtro de data in√≠cio
                data_inicio = st.date_input("Data In√≠cio", value=None, format="DD/MM/YYYY")
            with col3:
                # Filtro de data fim
                data_fim = st.date_input("Data Fim", value=None, format="DD/MM/YYYY")

            # Filtrar dataframe com base nos filtros
            df_filtrado = df.copy()
            if funcionarios_selecionados:
                df_filtrado = df_filtrado[df_filtrado["Funcion√°rio"].isin(funcionarios_selecionados)]
            if data_inicio and data_fim:
                df_filtrado["Data"] = pd.to_datetime(df_filtrado["Data"], format="%d/%m/%Y")
                df_filtrado = df_filtrado[
                    (df_filtrado["Data"] >= pd.to_datetime(data_inicio)) & 
                    (df_filtrado["Data"] <= pd.to_datetime(data_fim))
                ]
                df_filtrado["Data"] = df_filtrado["Data"].dt.strftime("%d/%m/%Y")
            elif data_inicio:
                df_filtrado["Data"] = pd.to_datetime(df_filtrado["Data"], format="%d/%m/%Y")
                df_filtrado = df_filtrado[df_filtrado["Data"] >= pd.to_datetime(data_inicio)]
                df_filtrado["Data"] = df_filtrado["Data"].dt.strftime("%d/%m/%Y")
            elif data_fim:
                df_filtrado["Data"] = pd.to_datetime(df_filtrado["Data"], format="%d/%m/%Y")
                df_filtrado = df_filtrado[df_filtrado["Data"] <= pd.to_datetime(data_fim)]
                df_filtrado["Data"] = df_filtrado["Data"].dt.strftime("%d/%m/%Y")

            # Configurar colunas para DataFrame interativo
            edited_df = st.data_editor(
                df_filtrado,
                column_config={
                    "X": st.column_config.CheckboxColumn(
                        "X",
                        help="Marque para selecionar os documentos que deseja baixar.",
                    ),
                    "Data": "Data",
                    "Funcion√°rio": "Funcion√°rio",
                    "Justificativa": "Justificativa",
                    "Anexo": "Anexo",
                },
                hide_index=True,
                disabled=("Data", "Funcion√°rio", "Justificativa", "Anexo"),
                use_container_width=True,
            )

            # Bot√µes de download em XLSX e PDF
            col4, col5, col6 = st.columns(3)
            with col4:
                # Coletar documentos selecionados para download
                selecionados = edited_df[edited_df["X"] == True]
                if not selecionados.empty:
                    for _, row in selecionados.iterrows():
                        doc_info = next((doc for doc in documentos if doc["Funcion√°rio"] == row["Funcion√°rio"] and doc["Data"] == row["Data"]), None)
                        if doc_info and doc_info["Anexo"]:
                            st.download_button(
                                use_container_width=True,
                                label=f"Baixar Anexo",
                                data=bytes(doc_info["Anexo"]),
                                file_name=f"documento_{row['Funcion√°rio']}_{row['Data']}.pdf",
                                mime="application/pdf",
                            )

            with col5:
                buffer = BytesIO()
                with pd.ExcelWriter(buffer, engine='openpyxl') as writer:
                    edited_df.to_excel(writer, index=False, sheet_name='Faltas')
                st.download_button(
                    label="Baixar em Excel",
                    data=buffer.getvalue(),
                    file_name="Faltas_Registradas.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    use_container_width=True
                )

            with col6:
                pdf = FPDF()
                pdf.add_page()
                pdf.set_font("Arial", "B", 12)
                pdf.cell(0, 10, "Faltas Registradas", ln=True, align="C")
                pdf.ln(5)
                pdf.set_font("Arial", "B", 9)
                pdf.cell(20, 7, "Data", 1, 0, "C")
                pdf.cell(50, 7, "Funcion√°rio", 1, 0, "C")
                pdf.cell(90, 7, "Justificativa", 1, 0, "C")
                pdf.cell(30, 7, "Anexo", 1, 1, "C")
                pdf.set_font("Arial", "", 9)
                for _, row in edited_df.iterrows():
                    pdf.cell(20, 6, row["Data"], 1, 0, "C")
                    pdf.cell(50, 6, row["Funcion√°rio"], 1, 0, "C")
                    pdf.cell(90, 6, row["Justificativa"], 1, 0, "C")
                    pdf.cell(30, 6, row["Anexo"], 1, 1, "C")
                pdf_buffer = BytesIO()
                pdf_bytes = pdf.output(dest='S').encode('latin1')  # Gera string e converte para bytes com latin1
                pdf_buffer.write(pdf_bytes)  # Escreve os bytes no BytesIO
                pdf_buffer.seek(0)  # Volta ao in√≠cio do buffer
                st.download_button(
                    label="Baixar em PDF",
                    data=pdf_buffer.getvalue(),
                    file_name="Faltas_Registradas.pdf",
                    mime="application/pdf",
                    use_container_width=True
                )

        else:
            st.info("Nenhuma falta registrada at√© o momento.")


def tela_funcionarios_ponto_dia():
    """Tela administrativa para exibir funcion√°rios que registraram ponto em um dia espec√≠fico."""
    if "usuario" not in st.session_state or not st.session_state["usuario"].get("administrador"):
        st.warning("Acesso restrito a administradores. Fa√ßa login como administrador para acessar esta √°rea.")
        return

    st.markdown("<h1 style='text-align: center;'>Funcion√°rios do Dia</h1>", unsafe_allow_html=True)
    st.write("Selecione a data para visualizar os funcion√°rios que registraram ponto:")

    data_selecionada = st.date_input("Data", value=datetime.now().date(), format="DD/MM/YYYY")

    conn = conexao_persistente
    if not conn:
        st.error("Erro ao conectar ao banco de dados.")
        return

    try:
        with conn.cursor() as cursor:
            cursor.execute("ROLLBACK")
            cursor.execute("""
                SELECT DISTINCT f.NOME, f.CARGO, r.CHEGADA, r.SAIDA_ALMOCO, r.RETORNO_ALMOCO, r.SAIDA
                FROM REGISTROS r
                JOIN FUNCIONARIOS f ON r.FUNCIONARIO_ID = f.ID
                WHERE r.DATA = %s
                ORDER BY f.NOME
            """, (data_selecionada,))
            registros = cursor.fetchall()

            if registros:
                df = pd.DataFrame(registros, columns=["Nome", "Cargo", "Chegada", "Sa√≠da Almo√ßo", "Retorno Almo√ßo", "Sa√≠da"])
                df["Chegada"] = df["Chegada"].apply(formatar_horario)
                df["Sa√≠da Almo√ßo"] = df["Sa√≠da Almo√ßo"].apply(formatar_horario)
                df["Retorno Almo√ßo"] = df["Retorno Almo√ßo"].apply(formatar_horario)
                df["Sa√≠da"] = df["Sa√≠da"].apply(formatar_horario)

                st.subheader(f"Funcion√°rios que registraram ponto em {data_selecionada.strftime('%d/%m/%Y')}")
                st.dataframe(df, hide_index=True, use_container_width=True)

                total_funcionarios = len(df)
                st.write(f"**Total de funcion√°rios registrados no dia:** {total_funcionarios}")

                # Bot√µes em colunas
                col1, col2 = st.columns(2)
                with col1:
                    # Baixar em XLSX
                    buffer = BytesIO()
                    with pd.ExcelWriter(buffer, engine='openpyxl') as writer:
                        df.to_excel(writer, index=False, sheet_name='Funcionarios')
                    st.download_button(
                        label="Baixar Relat√≥rio em Excel",
                        data=buffer.getvalue(),
                        file_name=f"Funcionarios_Ponto_{data_selecionada.strftime('%d/%m/%Y')}.xlsx",
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                        use_container_width=True
                    )
                with col2:
                    # Baixar em PDF
                    pdf_file = gerar_pdf_funcionarios_dia(df, data_selecionada)
                    with open(pdf_file, "rb") as f:
                        st.download_button(
                            label="Baixar Relat√≥rio em PDF",
                            data=f,
                            file_name=f"Funcionarios_Ponto_{data_selecionada.strftime('%d/%m/%Y')}.pdf",
                            mime="application/pdf",
                            use_container_width=True
                        )
                    os.remove(pdf_file)

            else:
                st.info(f"Nenhum funcion√°rio registrou ponto em {data_selecionada.strftime('%d/%m/%Y')}.")

            # Funcion√°rios ausentes
            cursor.execute("ROLLBACK")
            cursor.execute("""
                SELECT NOME, CARGO
                FROM FUNCIONARIOS
                WHERE ATIVO = TRUE AND ID NOT IN (
                    SELECT FUNCIONARIO_ID
                    FROM REGISTROS
                    WHERE DATA = %s 
                )
                AND ID NOT IN (
                    SELECT FUNCIONARIO_ID
                    FROM FERIAS
                    WHERE %s BETWEEN DATA_INICIO AND DATA_FIM
                )
                AND ID NOT IN (
                    SELECT FUNCIONARIO_ID
                    FROM FALTAS
                    WHERE DATA = %s
                )
                ORDER BY NOME
            """, (data_selecionada, data_selecionada, data_selecionada))
            ausentes = cursor.fetchall()

            if ausentes:
                df_ausentes = pd.DataFrame(ausentes, columns=["Nome", "Cargo"])
                st.subheader(f"Funcion√°rios ausentes em {data_selecionada.strftime('%d/%m/%Y')}")
                st.dataframe(df_ausentes, hide_index=True, use_container_width=True)
                st.write(f"**Total de funcion√°rios ausentes:** {len(df_ausentes)}")
            else:
                st.info(f"Todos os funcion√°rios registraram ponto ou est√£o de f√©rias/faltas justificadas em {data_selecionada.strftime('%d/%m/%Y')}.")
    except Exception as e:
        st.error(f"Erro ao buscar registros: {e}")

def gerar_pdf_funcionarios_dia(df, data_selecionada):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", "B", 12)
    pdf.cell(0, 10, f"Funcion√°rios que Registraram Ponto - {data_selecionada.strftime('%d/%m/%Y')}", ln=True, align="C")
    pdf.ln(5)

    pdf.set_font("Arial", "B", 9)
    pdf.cell(50, 7, "Nome", 1)
    pdf.cell(40, 7, "Cargo", 1)
    pdf.cell(25, 7, "Chegada", 1, 0, "C")        
    pdf.cell(25, 7, "Sa√≠da Almo√ßo", 1, 0, "C")   
    pdf.cell(28, 7, "Retorno Almo√ßo", 1, 0, "C")
    pdf.cell(22, 7, "Sa√≠da", 1, 1, "C")

    pdf.set_font("Arial", "", 9)
    for _, row in df.iterrows():
        pdf.cell(50, 6, row["Nome"], 1)
        pdf.cell(40, 6, row["Cargo"], 1)
        pdf.cell(25, 6, row["Chegada"], 1, 0, "C")        
        pdf.cell(25, 6, row["Sa√≠da Almo√ßo"], 1, 0, "C")   
        pdf.cell(28, 6, row["Retorno Almo√ßo"], 1, 0, "C") 
        pdf.cell(22, 6, row["Sa√≠da"], 1, 1, "C")          

    temp_file = tempfile.NamedTemporaryFile(delete=False, suffix=".pdf")
    pdf.output(temp_file.name)
    return temp_file.name


#Dashboard
def tela_dashboard_admin():
    """Dashboard administrativo com vis√£o geral do sistema de ponto, incluindo f√©rias."""
    if "usuario" not in st.session_state or not st.session_state["usuario"].get("administrador"):
        st.warning("Acesso restrito a administradores. Fa√ßa login como administrador para acessar esta √°rea.")
        return

    st.markdown("<h1 style='text-align: center;'>Dashboard Administrativo</h1>", unsafe_allow_html=True)
    st.write("")

    conn = conexao_persistente
    if not conn:
        st.error("Erro ao conectar ao banco de dados.")
        return

    try:
        with conn.cursor() as cursor:
            # Total de funcion√°rios ativos
            cursor.execute("SELECT COUNT(*) FROM FUNCIONARIOS WHERE ATIVO = TRUE")
            total_funcionarios_ativos = cursor.fetchone()[0]

            # Funcion√°rios presentes hoje (ativos que bateram ponto)
            data_atual = datetime.now().date()
            cursor.execute("ROLLBACK")
            cursor.execute("""
                SELECT COUNT(DISTINCT FUNCIONARIO_ID) 
                FROM REGISTROS 
                WHERE DATA = %s 
                AND FUNCIONARIO_ID IN (SELECT ID FROM FUNCIONARIOS WHERE ATIVO = TRUE)
            """, (data_atual,))
            presentes_hoje = cursor.fetchone()[0]

            # Horas extras acumuladas no m√™s
            primeiro_dia_mes = datetime(data_atual.year, data_atual.month, 1)
            cursor.execute("ROLLBACK")
            cursor.execute("""
                SELECT SUM(EXTRACT(EPOCH FROM HORAEXTRA))
                FROM REGISTROS
                WHERE DATA >= %s AND HORAEXTRA IS NOT NULL
            """, (primeiro_dia_mes,))
            total_segundos = cursor.fetchone()[0] or 0
            horas_extras_mes = total_segundos // 3600
            minutos_extras_mes = (total_segundos % 3600) // 60

            # Faltas pendentes de justificativa
            cursor.execute("ROLLBACK")
            cursor.execute("""
                SELECT COUNT(*)
                FROM FALTAS
                WHERE EXTRACT(MONTH FROM DATA) = EXTRACT(MONTH FROM CURRENT_DATE)
                AND EXTRACT(YEAR FROM DATA) = EXTRACT(YEAR FROM CURRENT_DATE)

            """)
            faltas_pendentes = cursor.fetchone()[0]

            # Funcion√°rios atualmente em f√©rias
            cursor.execute("ROLLBACK")
            cursor.execute("""
                SELECT f.NOME, ferias.DATA_INICIO, ferias.DATA_FIM
                FROM FERIAS ferias
                JOIN FUNCIONARIOS f ON ferias.FUNCIONARIO_ID = f.ID
                WHERE %s BETWEEN ferias.DATA_INICIO AND ferias.DATA_FIM
                ORDER BY f.NOME
            """, (data_atual,))
            ferias_atuais = cursor.fetchall()
            df_ferias_atuais = pd.DataFrame(
                ferias_atuais,
                columns=["Funcion√°rio", "In√≠cio", "Fim"]
            )
            df_ferias_atuais["In√≠cio"] = pd.to_datetime(df_ferias_atuais["In√≠cio"]).dt.strftime("%d/%m/%Y")
            df_ferias_atuais["Fim"] = pd.to_datetime(df_ferias_atuais["Fim"]).dt.strftime("%d/%m/%Y")

            # Funcion√°rios com f√©rias pr√≥ximas (pr√≥ximos 30 dias)
            data_fim_proximas = data_atual + timedelta(days=30)
            cursor.execute("ROLLBACK")
            cursor.execute("""
                SELECT f.NOME, ferias.DATA_INICIO, ferias.DATA_FIM
                FROM FERIAS ferias
                JOIN FUNCIONARIOS f ON ferias.FUNCIONARIO_ID = f.ID
                WHERE ferias.DATA_INICIO BETWEEN %s AND %s
                AND ferias.DATA_INICIO > %s
                ORDER BY ferias.DATA_INICIO
            """, (data_atual, data_fim_proximas, data_atual))
            ferias_proximas = cursor.fetchall()
            df_ferias_proximas = pd.DataFrame(
                ferias_proximas,
                columns=["Funcion√°rio", "In√≠cio", "Fim"]
            )
            df_ferias_proximas["In√≠cio"] = pd.to_datetime(df_ferias_proximas["In√≠cio"]).dt.strftime("%d/%m/%Y")
            df_ferias_proximas["Fim"] = pd.to_datetime(df_ferias_proximas["Fim"]).dt.strftime("%d/%m/%Y")

            # Gr√°fico de f√©rias por m√™s (pr√≥ximos 12 meses)
            data_fim_ano = data_atual + timedelta(days=365)
            cursor.execute("ROLLBACK")
            cursor.execute("""
                SELECT DATE_TRUNC('month', ferias.DATA_INICIO) AS Mes, COUNT(*) AS Quantidade
                FROM FERIAS ferias
                WHERE ferias.DATA_INICIO BETWEEN %s AND %s
                GROUP BY DATE_TRUNC('month', ferias.DATA_INICIO)
                ORDER BY Mes
            """, (data_atual, data_fim_ano))
            ferias_por_mes = cursor.fetchall()
            df_ferias_mes = pd.DataFrame(
                ferias_por_mes,
                columns=["M√™s", "Quantidade"]
            )
            df_ferias_mes["M√™s"] = pd.to_datetime(df_ferias_mes["M√™s"]).dt.strftime("%m/%Y")

            # Layout do Dashboard
            # M√©tricas principais
            col1, col2 = st.columns(2)
            with col1:
                st.metric("Total de Funcion√°rios Ativos", total_funcionarios_ativos)
                st.metric("Presentes Hoje", presentes_hoje,)
            with col2:
                st.metric("Horas Extras (M√™s)", f"{horas_extras_mes}h {minutos_extras_mes}m")
                st.metric("Faltas Registradas (M√™s)", faltas_pendentes)
            col3, col4 = st.columns(2)
            with col3:
                # Gr√°fico de pizza: Total de Funcion√°rios Ativos vs Presentes Hoje
                if total_funcionarios_ativos > 0:
                    ausentes_hoje = total_funcionarios_ativos - presentes_hoje
                    pie_data = {
                        "Categoria": ["Presentes", "Ausentes"],
                        "Quantidade": [presentes_hoje, ausentes_hoje]
                    }
                    pie_df = pd.DataFrame(pie_data)
                    fig = {
                        "data": [
                            {
                                "values": pie_df["Quantidade"],
                                "labels": pie_df["Categoria"],
                                "type": "pie",
                                "textinfo": "label+percent",
                                "automargin": True
                            }
                        ],
                        "layout": {
                            "title": "Rela√ß√£o de registros do dia",
                            "height": 400,
                            "width": 300
                        }
                    }
                    st.plotly_chart(fig)
                else:
                    st.info("Nenhum funcion√°rio ativo cadastrado.")

            with col4:
                # Gr√°fico de presen√ßa nos √∫ltimos 7 dias (rela√ß√£o presen√ßa/total de funcion√°rios ativos)
                data_inicio = data_atual - timedelta(days=6)
                cursor.execute("ROLLBACK")
                cursor.execute("""
                    SELECT 
                        r.DATA, 
                        COUNT(DISTINCT r.FUNCIONARIO_ID) AS Presentes,
                        (SELECT COUNT(ID) FROM FUNCIONARIOS WHERE ATIVO = TRUE) AS TotalFunc
                    FROM REGISTROS r
                    WHERE r.DATA BETWEEN %s AND %s
                    GROUP BY r.DATA
                    HAVING COUNT(DISTINCT r.FUNCIONARIO_ID) > 0
                    ORDER BY r.DATA
                """, (data_inicio, data_atual))
                presencas = cursor.fetchall()

                # Criar DataFrame
                df_presencas = pd.DataFrame(presencas, columns=["Data", "Presentes", "Total de Func"])

                # Converter Data para datetime e formatar para exibi√ß√£o no gr√°fico
                df_presencas["Data"] = pd.to_datetime(df_presencas["Data"]).dt.strftime("%d/%m")

                # Calcular a porcentagem de presen√ßa
                df_presencas["Porcentagem Presen√ßa"] = (df_presencas["Presentes"] / df_presencas["Total de Func"] * 100).round(2)

                # Criar o gr√°fico
                fig = go.Figure()
                fig.add_trace(go.Bar(
                    x=df_presencas["Data"],
                    y=df_presencas["Porcentagem Presen√ßa"],
                    name="Porcentagem de Presen√ßa",
                    marker_color='#00cc96',
                    text=[f"{p}%" for p in df_presencas["Porcentagem Presen√ßa"]],
                    textposition="auto"
                ))
                fig.update_layout(
                    title="Porcentagem de Presen√ßa por Dia",
                    xaxis_title="Data",
                    yaxis_title="Porcentagem de Presen√ßa (%)",
                    yaxis_range=[0, 100],
                    bargap=0.2,
                    height=400,
                    width=600
                )

                st.plotly_chart(fig)


            # Se√ß√£o de F√©rias
            st.subheader("Funcion√°rios em F√©rias Hoje")
            if not df_ferias_atuais.empty:
                st.dataframe(df_ferias_atuais, hide_index=True, use_container_width=True)
                st.write(f"**Total em f√©rias hoje:** {len(df_ferias_atuais)}")
            else:
                st.info("Nenhum funcion√°rio em f√©rias hoje.")

            st.subheader("F√©rias Pr√≥ximas (30 Dias)")
            if not df_ferias_proximas.empty:
                st.dataframe(df_ferias_proximas, hide_index=True, use_container_width=True)
                st.write(f"**Total de f√©rias pr√≥ximas:** {len(df_ferias_proximas)}")
            else:
                st.info("Nenhuma f√©rias agendada para os pr√≥ximos 30 dias.")

            # Gr√°fico de F√©rias por M√™s
            st.subheader("Distribui√ß√£o de F√©rias (Pr√≥ximos 12 Meses)")
            if not df_ferias_mes.empty:
                st.bar_chart(df_ferias_mes.set_index("M√™s"))
            else:
                st.info("Nenhum dado de f√©rias dispon√≠vel para os pr√≥ximos 12 meses.")

            # Top 5 funcion√°rios com mais horas extras
            cursor.execute("ROLLBACK")
            cursor.execute("""
                SELECT f.NOME, SUM(EXTRACT(EPOCH FROM r.HORAEXTRA)) as Segundos
                FROM REGISTROS r
                JOIN FUNCIONARIOS f ON r.FUNCIONARIO_ID = f.ID
                WHERE r.HORAEXTRA IS NOT NULL AND r.DATA >= %s
                GROUP BY f.NOME
                ORDER BY Segundos DESC
                LIMIT 5
            """, (primeiro_dia_mes,))
            top_horas = cursor.fetchall()
            df_top_horas = pd.DataFrame(top_horas, columns=["Nome", "Segundos"])
            df_top_horas["Horas"] = df_top_horas["Segundos"].apply(lambda x: f"{x // 3600}h {(x % 3600) // 60}m")
            st.subheader("Top 5 - Horas Extras (M√™s)")
            st.dataframe(df_top_horas[["Nome", "Horas"]], hide_index=True, use_container_width=True)

    except Exception as e:
        st.error(f"Erro ao carregar o dashboard: {e}")
#falta do usuario logado

def tela_usuario_faltas():
    usuario = st.session_state["usuario"]
    st.markdown(f"<h1 style='text-align: center;'>Minhas Faltas</h1>", unsafe_allow_html=True)

    # Conex√£o com o banco de dados
    conn = conexao_persistente
    if conn:
        cursor = conn.cursor()
        cursor.execute("ROLLBACK")
        cursor.execute("""
            SELECT DATA, JUSTIFICATIVA, DOCUMENTO
            FROM FALTAS
            WHERE FUNCIONARIO_ID = %s
            ORDER BY DATA DESC
        """, (usuario["id"],))
        registros = cursor.fetchall()

        if registros:
            # Criar dataframe para exibi√ß√£o
            dados = []
            documentos = []  # Lista para armazenar documentos e informa√ß√µes associadas

            for registro in registros:
                data, justificativa, documento = registro
                possui_documento = "Sim" if documento else "N√£o"
                dados.append({
                    "X": False,
                    "Data": data.strftime("%d/%m/%Y"),
                    "Justificativa": justificativa,
                    "Anexo": possui_documento
                })

                # Adicionar documento para refer√™ncia
                documentos.append({
                    "Data": data.strftime("%d/%m/%Y"),
                    "Anexo": documento
                })

            # Criar dataframe
            df = pd.DataFrame(dados)

            # Configurar colunas para DataFrame interativo
            edited_df = st.data_editor(
                df,
                column_config={
                    "X": st.column_config.CheckboxColumn(
                        "X",
                        help="Marque para selecionar os documentos que deseja baixar.",
                    ),
                    "Data": "Data",
                    "Justificativa": "Justificativa",
                    "Anexo": "Anexo",
                },
                hide_index=True,disabled=("Data", "Justificativa","Anexo"),
                use_container_width=True,
            )

            # Coletar documentos selecionados para download
            selecionados = edited_df[edited_df["X"] == True]
            if not selecionados.empty:
                for _, row in selecionados.iterrows():
                    doc_info = next((doc for doc in documentos if doc["Data"] == row["Data"]), None)
                    if doc_info and doc_info["Anexo"]:
                        st.download_button(
                            label="Baixar Documento",
                            data=bytes(doc_info["Anexo"]), 
                            file_name=f"documento_{row['Data']}.pdf",
                            mime="application/pdf",
                        )
            else:
                ''#st.warning("Nenhum documento foi selecionado para download.")
        else:
            st.info("Voc√™ n√£o possui faltas registradas!")
    else:
        st.error("N√£o foi poss√≠vel conectar ao banco de dados.")


############################################
#Altera√ß√µes feitas no cadastro do usuario
############################################


def tela_auditoria_cadastros():
    st.markdown("<h1 style='text-align: center;'>Auditoria no Cadastro</h1>", unsafe_allow_html=True)
    conn = conexao_persistente
    if not conn:
        st.error("Erro ao conectar ao banco de dados.")
        return

    try:
        with conn.cursor() as cursor:
            # Filtros
            col1, col2, col3 = st.columns(3)
            with col1:
                usuario_alterado = st.text_input("Usu√°rio Alterado (Nome)", value="")
            with col2:
                data_inicio = st.date_input("Data de In√≠cio", value=None, format="DD/MM/YYYY")
            with col3:
                data_fim = st.date_input("Data de Fim", value=None, format="DD/MM/YYYY")
            
            palavra_chave = st.text_input("Palavra-chave no Campo/Valor Alterado", value="")

            # Construir query com filtros
            query = """
                SELECT f.NOME AS "Funcion√°rio", a.ALTERADO_POR, a.CAMPO_ALTERADO , a.VALOR_ANTERIOR, a.VALOR_NOVO, a.DATA_ALTERACAO
                FROM ALTERACOES_FUNCIONARIOS a
                JOIN FUNCIONARIOS f ON a.FUNCIONARIO_ID = f.ID
                WHERE 1=1
            """
            params = []
            if usuario_alterado:
                query += " AND f.NOME ILIKE %s"
                params.append(f"%{usuario_alterado}%")
            if data_inicio:
                query += " AND a.DATA_ALTERACAO >= %s"
                params.append(data_inicio)
            if data_fim:
                query += " AND a.DATA_ALTERACAO <= %s"
                params.append(data_fim)
            if palavra_chave:
                query += " AND (a.VALOR_ANTERIOR ILIKE %s OR a.VALOR_NOVO ILIKE %s OR a.CAMPO_ALTERADO ILIKE %s)"
                params.extend([f"%{palavra_chave}%", f"%{palavra_chave}%",f"%{palavra_chave}%"])
            query += " ORDER BY a.DATA_ALTERACAO DESC"

            cursor.execute(query, params)
            registros = cursor.fetchall()

            if registros:
                df = pd.DataFrame(registros, columns=["Funcion√°rio", "Alterado Por", "Campo Alterado", "Valor Anterior", "Valor Novo", "Data Altera√ß√£o"])
                df["Data Altera√ß√£o"] = pd.to_datetime(df["Data Altera√ß√£o"]).dt.strftime("%d/%m/%Y %H:%M:%S")
                st.dataframe(df, use_container_width=True, hide_index=True)

                # Bot√µes de download
                col1, col2 = st.columns(2)
                with col1:
                    buffer = BytesIO()
                    with pd.ExcelWriter(buffer, engine='openpyxl') as writer:
                        df.to_excel(writer, index=False, sheet_name='Auditoria_Cadastros')
                        workbook = writer.book
                        worksheet = writer.sheets['Auditoria_Cadastros']
                        for column_cells in worksheet.columns:
                            length = max(len(str(cell.value or "")) for cell in column_cells)
                            col_letter = get_column_letter(column_cells[0].column)
                            worksheet.column_dimensions[col_letter].width = length + 2
                            for cell in column_cells:
                                cell.alignment = Alignment(horizontal='center', vertical='center')
                    buffer.seek(0)
                    st.download_button(
                        label="Baixar em XLSX",
                        data=buffer,
                        file_name="Auditoria_Cadastros.xlsx",
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                        use_container_width=True
                    )

                with col2:
                    # Criar objeto PDF em modo paisagem
                    pdf = FPDF(orientation="L")
                    pdf.set_auto_page_break(auto=True, margin=15)
                    pdf.set_top_margin(5)
                    pdf.add_page()
                    pdf.set_font("Arial", "B", 12)

                    # Carregar informa√ß√µes da empresa
                    config_empresa = carregar_configuracoes_empresa()
                    nome_empresa = config_empresa.get("nome", "Nome da Empresa")
                    data_emissao = datetime.now().strftime("%d/%m/%Y")

                    pdf.set_font("Arial", "B", 9)  # Negrito

                    # Nome da empresa √† esquerda e data de emiss√£o √† direita
                    pdf.cell(140, 10, f"Empresa: {nome_empresa}", ln=False, align="L")  
                    pdf.cell(0, 10, f"Data de Emiss√£o: {data_emissao}", ln=True, align="R")  

                    pdf.ln(5)

                    # T√≠tulo centralizado
                    pdf.set_font("Arial", "B", 12)
                    pdf.cell(0, 13, "Auditoria no Cadastro de Funcion√°rios", ln=True, align="C")
                    pdf.ln(5)

                    # Criar cabe√ßalho da tabela
                    pdf.set_font("Arial", "B", 9)
                    pdf.cell(59, 7, "Funcion√°rio", 1, 0, "C")
                    pdf.cell(39, 7, "Alterado Por", 1, 0, "C")
                    pdf.cell(30, 7, "Campo", 1, 0, "C")
                    pdf.cell(61, 7, "Valor Anterior", 1, 0, "C")
                    pdf.cell(61, 7, "Valor Novo", 1, 0, "C")
                    pdf.cell(32, 7, "Data Altera√ß√£o", 1, 1, "C")

                    pdf.set_font("Arial", "", 9)

                    # Fun√ß√£o para limitar o tamanho do texto
                    def limitar_texto(texto, largura_maxima):
                        """Trunca o texto se ele ultrapassar a largura m√°xima da c√©lula."""
                        while pdf.get_string_width(texto) > largura_maxima:
                            texto = texto[:-1]  # Remove o √∫ltimo caractere at√© caber
                        return texto + "" if len(texto) < len(str(row)) else texto
                    # Divide o nome completo em partes e pega apenas o primeiro e o √∫ltimo nome
                    for _, row in df.iterrows():
                        # Pega apenas o primeiro e o √∫ltimo nome do campo "Alterado Por"
                        nome_completo = row["Alterado Por"].split()
                        if len(nome_completo) > 1:
                            nome_formatado =  f"{nome_completo[0]} {nome_completo[1]}"  # Exemplo: "Jo√£o Pereira"
                        else:
                            nome_formatado = nome_completo[0] 
                    # Gerar as linhas da tabela
                    for _, row in df.iterrows():
                        pdf.cell(59, 6, limitar_texto(str(row["Funcion√°rio"]), 58), 1, 0, "C")
                        pdf.cell(39, 6, nome_formatado, 1, 0, "C")
                        pdf.cell(30, 6, row["Campo Alterado"], 1, 0, "C")
                        pdf.cell(61, 6, limitar_texto(str(row["Valor Anterior"]), 60), 1, 0, "C")
                        pdf.cell(61, 6, limitar_texto(str(row["Valor Novo"]), 60), 1, 0, "C")
                        pdf.cell(32, 6, row["Data Altera√ß√£o"], 1, 1, "C")

                    # Gerar o PDF e permitir download
                    pdf_buffer = BytesIO()
                    pdf_bytes = pdf.output(dest='S').encode('latin1')
                    pdf_buffer.write(pdf_bytes)
                    pdf_buffer.seek(0)

                    st.download_button(
                        label="Baixar em PDF",
                        data=pdf_buffer,
                        file_name="Auditoria_Cadastros.pdf",
                        mime="application/pdf",
                        use_container_width=True
                    )

            else:
                st.warning("Nenhum registro de altera√ß√£o encontrado.")
    except Exception as e:
        st.error(f"Erro ao buscar registros de auditoria: {e}")


############################################
#Altera√ß√µes feitas na folha de ponto
############################################

def tela_auditoria_pontos():
    st.markdown("<h1 style='text-align: center;'>Auditoria no Registro do Ponto</h1>", unsafe_allow_html=True)

    conn = conexao_persistente
    if not conn:
        st.error("Erro ao conectar ao banco de dados.")
        return

    try:
        with conn.cursor() as cursor:
            # Filtros
            col1, col2, col3 = st.columns(3)
            with col1:
                usuario_alterado = st.text_input("Usu√°rio Alterado (Nome)", value="")
            with col2:
                data_inicio = st.date_input("Data de In√≠cio", value=None, format="DD/MM/YYYY")
            with col3:
                data_fim = st.date_input("Data de Fim", value=None, format="DD/MM/YYYY")
            
            palavra_chave = st.text_input("Palavra-chave no Valor Alterado", value="")

            # Construir query com filtros
            query = """
                SELECT f.NOME AS "Funcion√°rio", a.ALTERADO_POR AS "Alterado Por", a.CAMPO_ALTERADO AS "Campo Alterado",
                       a.VALOR_ANTERIOR AS "Valor Anterior", a.VALOR_NOVO AS "Valor Novo", a.DATA_ALTERACAO AS "Data Altera√ß√£o"
                FROM ALTERACOES_REGISTROS_PONTO a
                JOIN FUNCIONARIOS f ON a.FUNCIONARIO_ID = f.ID
                WHERE 1=1
            """
            params = []
            if usuario_alterado:
                query += " AND f.NOME ILIKE %s"
                params.append(f"%{usuario_alterado}%")
            if data_inicio:
                query += " AND a.DATA_ALTERACAO >= %s"
                params.append(data_inicio)
            if data_fim:
                query += " AND a.DATA_ALTERACAO <= %s"
                params.append(data_fim)
            if palavra_chave:
                query += " AND (CAST(a.VALOR_ANTERIOR AS TEXT) ILIKE %s OR CAST(a.VALOR_NOVO AS TEXT) ILIKE %s)"
                params.extend([f"%{palavra_chave}%", f"%{palavra_chave}%"])
            query += " ORDER BY a.DATA_ALTERACAO DESC"

            cursor.execute(query, params)
            registros = cursor.fetchall()

            if registros:
                df = pd.DataFrame(registros, columns=["Funcion√°rio", "Alterado Por", "Campo Alterado", "Valor Anterior", "Valor Novo", "Data Altera√ß√£o"])
                df["Data Altera√ß√£o"] = pd.to_datetime(df["Data Altera√ß√£o"]).dt.strftime("%d/%m/%Y %H:%M:%S")
                df["Valor Anterior"] = df["Valor Anterior"].apply(lambda x: x.strftime("%H:%M:%S") if x else "")
                df["Valor Novo"] = df["Valor Novo"].apply(lambda x: x.strftime("%H:%M:%S") if x else "")
                st.dataframe(df, use_container_width=True, hide_index=True)

                # Bot√µes de download
                col1, col2 = st.columns(2)
                with col1:
                    buffer = BytesIO()
                    with pd.ExcelWriter(buffer, engine='openpyxl') as writer:
                        df.to_excel(writer, index=False, sheet_name='Auditoria_Pontos')
                        workbook = writer.book
                        worksheet = writer.sheets['Auditoria_Pontos']
                        for column_cells in worksheet.columns:
                            length = max(len(str(cell.value or "")) for cell in column_cells)
                            col_letter = get_column_letter(column_cells[0].column)
                            worksheet.column_dimensions[col_letter].width = length + 2
                            for cell in column_cells:
                                cell.alignment = Alignment(horizontal='center', vertical='center')
                    buffer.seek(0)
                    st.download_button(
                        label="Baixar em XLSX",
                        data=buffer,
                        file_name="Auditoria_Pontos.xlsx",
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                        use_container_width=True
                    )

                with col2:
                    pdf = FPDF(orientation="L")  # Modo paisagem
                    pdf.set_auto_page_break(auto=True, margin=15)
                    pdf.set_top_margin(5)
                    pdf.set_left_margin(33)  # Margem esquerda para centralizar (297 - 231 = 66 / 2 = 33 mm)
                    pdf.set_right_margin(33)  # Margem direita para centralizar
                    pdf.add_page()

                    config_empresa = carregar_configuracoes_empresa()
                    nome_empresa = config_empresa.get("nome", "Nome da Empresa")
                    data_emissao = datetime.now().strftime("%d/%m/%Y")

                    pdf.set_font("Arial", "B", 10)
                    pdf.cell(140, 10, f"Empresa: {nome_empresa}", ln=False, align="L")
                    pdf.cell(0, 10, f"Data de Emiss√£o: {data_emissao}", ln=True, align="R")
                    pdf.ln(5)

                    pdf.set_font("Arial", "B", 12)
                    pdf.cell(0, 10, "Auditoria no Registro do Ponto", ln=True, align="C")
                    pdf.ln(5)

                    pdf.set_font("Arial", "B", 9)
                    pdf.cell(60, 7, "Funcion√°rio", 1, 0, "C")
                    pdf.cell(39, 7, "Alterado Por", 1, 0, "C")
                    pdf.cell(39, 7, "Campo", 1, 0, "C")
                    pdf.cell(30, 7, "Valor Anterior", 1, 0, "C")
                    pdf.cell(30, 7, "Valor Novo", 1, 0, "C")
                    pdf.cell(33, 7, "Data Altera√ß√£o", 1, 1, "C")

                    pdf.set_font("Arial", "", 9)
                    
                    def limitar_texto(texto, largura_maxima):
                        """Trunca o texto se ele ultrapassar a largura m√°xima da c√©lula."""
                        while pdf.get_string_width(texto) > largura_maxima:
                            texto = texto[:-1]  # Remove o √∫ltimo caractere at√© caber
                        return texto + "" if len(texto) < len(str(row)) else texto

                    for _, row in df.iterrows():
                        nome_completo = row["Alterado Por"].split()
                        if len(nome_completo) > 1:
                            nome_formatado = f"{nome_completo[0]} {nome_completo[1]}"
                        else:
                            nome_formatado = nome_completo[0]

                        pdf.cell(60, 6, limitar_texto(str(row["Funcion√°rio"]),59), 1, 0, "C")
                        pdf.cell(39, 6, nome_formatado, 1, 0, "C")
                        pdf.cell(39, 6, row["Campo Alterado"], 1, 0, "C")
                        pdf.cell(30, 6, row["Valor Anterior"], 1, 0, "C")
                        pdf.cell(30, 6, row["Valor Novo"], 1, 0, "C")
                        pdf.cell(33, 6, row["Data Altera√ß√£o"], 1, 1, "C")
                    
                    pdf_buffer = BytesIO()
                    pdf_bytes = pdf.output(dest='S').encode('latin1')
                    pdf_buffer.write(pdf_bytes)
                    pdf_buffer.seek(0)
                    st.download_button(
                        label="Baixar em PDF",
                        data=pdf_buffer,
                        file_name="Auditoria_Pontos.pdf",
                        mime="application/pdf",
                        use_container_width=True
                    )
            else:
                st.warning("Nenhum registro de altera√ß√£o encontrado.")
    except Exception as e:
        st.error(f"Erro ao buscar registros de auditoria: {e}")

# Escopo para acesso ao Google Calendar
SCOPES = ['https://www.googleapis.com/auth/calendar']

# Fun√ß√£o para autentica√ß√£o usando OAuth2
def autenticar_google_calendar():
    credenciais = None
    if os.path.exists('token.pickle'):
        with open('token.pickle', 'rb') as token:
            credenciais = pickle.load(token)

    if not credenciais or not credenciais.valid:
        if credenciais and credenciais.expired and credenciais.refresh_token:
            credenciais.refresh(Request())
        else:
            fluxo = InstalledAppFlow.from_client_secrets_file(
                'AutenticaCalendar.json', SCOPES
            )
            credenciais = fluxo.run_local_server(port=0)
        
        with open('token.pickle', 'wb') as token:
            pickle.dump(credenciais, token)
    
    return credenciais
# Fun√ß√£o para obter o ID do calend√°rio autenticado
def obter_id_calendario(credenciais):
    servico = build('calendar', 'v3', credentials=credenciais)
    calendario = servico.calendars().get(calendarId='primary').execute()
    return calendario['id']

#
def adicionar_evento_calendario(servico, calendario_id, titulo, inicio, fim, emails_convidados=None):
    """Adiciona um evento ao Google Calendar"""
    try:
        evento = {
            'summary': titulo,  # T√≠tulo do evento
            'start': {'dateTime': f"{inicio}T00:00:00-03:00", 'timeZone': 'America/Sao_Paulo'},
            'end': {'dateTime': f"{fim}T23:59:59-03:00", 'timeZone': 'America/Sao_Paulo'},
            'attendees': [{'email': email} for email in emails_convidados] if emails_convidados else [],
        }

        # Envia o evento para o Google Calendar
        servico.events().insert(calendarId=calendario_id, body=evento).execute()
        #print("Evento criado com sucesso:", json.dumps(response, indent=2))
    except:
        ''
    

def obter_usuario_logado():
    usuario = st.session_state.get("usuario", {})
    
    if isinstance(usuario, dict):  # Certifique-se de que 'usuario' √© um dicion√°rio
        nome_completo = usuario.get("nome", "Desconhecido")  # Ajuste para pegar o campo correto
    else:
        nome_completo = usuario  # Se for uma string diretamente
    
    partes_nome = nome_completo.split()
    return f"{partes_nome[0]} {partes_nome[1]}" if len(partes_nome) >= 2 else nome_completo


############################################
#Agendamento de f√©rias
############################################

def exibir_formulario_ferias():
    creds = autenticar_google_calendar()
    calendario_id = obter_id_calendario(creds)
    servico = build('calendar', 'v3', credentials=creds)
    
    st.markdown("<h1 style='text-align: center;'>Marcar F√©rias</h1>", unsafe_allow_html=True)
    
    conn = conexao_persistente
    if conn:
        try:
            cursor = conn.cursor()
            cursor.execute("ROLLBACK")
            cursor.execute("""
                SELECT ID, NOME, EMAIL
                FROM FUNCIONARIOS
                ORDER BY 2
            """)
            funcionarios = cursor.fetchall()
        except Exception as e:
            st.error(f"Erro ao carregar os funcion√°rios: {e}")
            return
    else:
        st.error("Erro na conex√£o com o banco de dados.")
        return

    if not funcionarios:
        st.error("Nenhum funcion√°rio encontrado no banco de dados.")
        return
    
    if "funcionarios_dict" not in st.session_state:
        st.session_state["funcionarios_dict"] = {
            f"{nome}": {"id": id, "email": email} for id, nome, email in funcionarios
        }
    
    usuario_logado = obter_usuario_logado()  # Captura usu√°rio logado da sess√£o
    
    # Inicializar o estado, se necess√°rio
    if "funcionario_selecionado" not in st.session_state:
        primeiro_funcionario = list(st.session_state["funcionarios_dict"].keys())[0]
        st.session_state["funcionario_selecionado"] = primeiro_funcionario
        st.session_state["emails_convidados"] = st.session_state["funcionarios_dict"][primeiro_funcionario]["email"] or ""

    # Atualizar os e-mails convidados ao mudar o funcion√°rio
    def update_emails_convidados():
        """Atualiza os e-mails convidados no estado ao mudar o funcion√°rio."""
        funcionario_atual = st.session_state["funcionario_selecionado"]
        if funcionario_atual in st.session_state["funcionarios_dict"]:
            st.session_state["emails_convidados"] = st.session_state["funcionarios_dict"][funcionario_atual]["email"] or ""

    funcionario_selecionado = st.selectbox(
        "Selecione o Funcion√°rio",
        options=list(st.session_state["funcionarios_dict"].keys()),
        index=list(st.session_state["funcionarios_dict"].keys()).index(st.session_state["funcionario_selecionado"]),
        key="funcionario_selecionado",
        on_change=update_emails_convidados
    )
    
    with st.form("formulario_ferias"):
        col1, col2 = st.columns(2)
        with col1:
            data_inicio = st.date_input("Data de In√≠cio", format="DD/MM/YYYY")
        with col2:
            data_fim = st.date_input("Data de Fim", format="DD/MM/YYYY")
        
        ano_referencia = f"{data_inicio.year-1}/{data_inicio.year}"
        
        col3, col4 = st.columns(2)
        with col3:
            st.text_input("Ano de Refer√™ncia", ano_referencia)
        with col4:
            st.text_input("Respons√°vel pela Autoriza√ß√£o", usuario_logado, disabled=True)
        
        emails_convidados = st.text_area(
            "E-mails:",
            placeholder="exemplo1@dominio.com, exemplo2@dominio.com",
            key="emails_convidados",
        )
        
        botao_submeter = st.form_submit_button("Marcar F√©rias", use_container_width=True)
        
        if botao_submeter:
            if data_inicio > data_fim:
                st.error("A data de in√≠cio n√£o pode ser maior que a data de fim.")
            elif not funcionario_selecionado:
                st.error("O funcion√°rio √© obrigat√≥rio.")
            else:
                funcionario_id = st.session_state["funcionarios_dict"][funcionario_selecionado]["id"]
                titulo = f"F√©rias: {funcionario_selecionado.split(' ')[0]}"
                emails_formatados = [email.strip() for email in emails_convidados.split(",") if email.strip()]
                registrado_em = datetime.now().strftime('%Y-%m-%d')
                
                adicionar_evento_calendario(
                    servico,
                    calendario_id,
                    titulo,
                    data_inicio.strftime('%Y-%m-%d'),
                    (data_fim + timedelta(days=1)).strftime('%Y-%m-%d'),
                    emails_formatados,
                )
                
                if conn:
                    try:
                        cursor.execute("""
                            INSERT INTO FERIAS (FUNCIONARIO_ID, DATA_INICIO, DATA_FIM, ANO_REFERENCIA, RESPONSAVEL_AUTORIZACAO, EMAILS_ENVOLVIDOS,REGISTRADO_EM)
                            VALUES (%s, %s, %s, %s, %s, %s,%s)
                        """, (funcionario_id, data_inicio, data_fim, ano_referencia, usuario_logado, ','.join(emails_formatados),registrado_em))

                        conn.commit()
                        st.success(f"F√©rias de {funcionario_selecionado.split(' ')[0]} adicionadas ao calend√°rio e salvas no banco de dados!")
                    except Exception as e:
                        st.error(f"Erro ao salvar no banco de dados: {e}")





def minhas_ferias_marcadas():
    usuario = st.session_state["usuario"]
    st.markdown("<h1 style='text-align: center;'>Minhas F√©rias</h1>", unsafe_allow_html=True)

    # Obter a conex√£o com o banco de dados
    conn = conexao_persistente
    if conn:
        try:
            cursor = conn.cursor()
            cursor.execute("ROLLBACK")
            # Buscar todas as f√©rias marcadas
            cursor.execute("""
                SELECT 
                    f.NOME AS Funcionario,
                    ferias.DATA_INICIO AS DataInicio,
                    ferias.DATA_FIM AS DataFim,
                    ferias.REGISTRADO_EM AS RegistradoEm,
                    ferias.ano_referencia
                FROM FERIAS 
                JOIN FUNCIONARIOS f ON ferias.FUNCIONARIO_ID = f.ID
                WHERE FUNCIONARIO_ID = %s
                ORDER BY ferias.DATA_INICIO DESC
            """,(usuario["id"],))
            registros = cursor.fetchall()

            if registros:
                # Criar o DataFrame para exibir os dados
                df = pd.DataFrame(
                    registros,
                    columns=["Funcion√°rio", "Data de In√≠cio", "Data Final","Aprovado em","Refer√™ncia"]
                )

                # Formatando as colunas de data para exibi√ß√£o
                df["Data de In√≠cio"] = pd.to_datetime(df["Data de In√≠cio"]).dt.strftime("%d/%m/%Y")
                df["Data Final"] = pd.to_datetime(df["Data Final"]).dt.strftime("%d/%m/%Y")
                df["Aprovado em"] = pd.to_datetime(df["Aprovado em"]).dt.strftime("%d/%m/%Y")

                # Exibir o DataFrame no Streamlit
                st.data_editor(df,disabled=True,hide_index=True,use_container_width=True )

            else:
                st.warning("Nenhuma f√©rias marcada no momento.")
        except Exception as e:
            st.error(f"Erro ao buscar f√©rias marcadas: {e}")
        finally:
            ''
    else:
        st.error("Erro na conex√£o com o banco de dados.")



#Listar f√©rias de todos os funcion√°rios 


def ferias_marcadas():
    st.markdown("<h1 style='text-align: center;'>F√©rias Agendadas</h1>", unsafe_allow_html=True)

    # Obter a conex√£o com o banco de dados
    conn = conexao_persistente
    if conn:
        try:
            cursor = conexao_persistente.cursor()
            # Buscar todos os nomes dos funcion√°rios para o filtro
            cursor.execute("SELECT NOME FROM FUNCIONARIOS ORDER BY NOME")
            todos_funcionarios = [row[0] for row in cursor.fetchall()]

            col1, col2, col3 = st.columns(3)
            with col1:
                funcionarios_selecionados = st.multiselect(
                    "Selecione os Funcion√°rios:", options=todos_funcionarios, default=[]
                )
            with col2:
                data_inicio_filtro = st.date_input("Data de In√≠cio", value=None, format="DD/MM/YYYY")
            with col3:
                data_fim_filtro = st.date_input("Data de Fim", value=None, format="DD/MM/YYYY")

            # Construir a cl√°usula WHERE com base na sele√ß√£o
            filtros = []
            if funcionarios_selecionados:
                filtro_funcionarios = "(" + ", ".join(f"'{nome}'" for nome in funcionarios_selecionados) + ")"
                filtros.append(f"f.NOME IN {filtro_funcionarios}")
            
            if data_inicio_filtro:
                filtros.append(f"ferias.DATA_INICIO >= '{data_inicio_filtro}'")
            
            if data_fim_filtro:
                filtros.append(f"ferias.DATA_FIM <= '{data_fim_filtro}'")
            
            where_clause = " WHERE " + " AND ".join(filtros) if filtros else ""
            
            query = f"""
                SELECT 
                    f.NOME AS Funcionario,
                    ferias.DATA_INICIO,
                    ferias.DATA_FIM,
                    ferias.REGISTRADO_EM,
                    ferias.ano_referencia,
                    ferias.responsavel_autorizacao
                FROM FERIAS
                JOIN FUNCIONARIOS f ON ferias.FUNCIONARIO_ID = f.ID
                {where_clause}
                ORDER BY 1
            """

            # Executar a query e buscar os registros
            cursor.execute(query)
            registros = cursor.fetchall()

            if registros:
                # Criar o DataFrame para exibir os dados
                df = pd.DataFrame(
                    registros,
                    columns=["Funcion√°rio", "Data de In√≠cio", "Data Final", "Aprovado em", "Refer√™ncia", "Autorizado Por"]
                )

                # Formatando as colunas de data para exibi√ß√£o
                df["Data de In√≠cio"] = pd.to_datetime(df["Data de In√≠cio"]).dt.strftime("%d/%m/%Y")
                df["Data Final"] = pd.to_datetime(df["Data Final"]).dt.strftime("%d/%m/%Y")
                df["Aprovado em"] = pd.to_datetime(df["Aprovado em"]).dt.strftime("%d/%m/%Y")

                # Exibir o DataFrame no Streamlit
                st.dataframe(df, hide_index=True, use_container_width=True)

                # Bot√µes de download em colunas
                col4, col5 = st.columns(2)
                
                with col4:
                    # Download em XLSX com colunas ajustadas automaticamente
                    buffer = BytesIO()
                    with pd.ExcelWriter(buffer, engine='openpyxl') as writer:
                        df.to_excel(writer, index=False, sheet_name='Ferias_Agendadas')
                        workbook = writer.book
                        worksheet = writer.sheets['Ferias_Agendadas']
                        
                        # Ajustar largura das colunas automaticamente
                        for column_cells in worksheet.columns:
                            length = max(len(str(cell.value or "")) for cell in column_cells)
                            col_letter = get_column_letter(column_cells[0].column)
                            worksheet.column_dimensions[col_letter].width = length + 2  # Adicionar margem
                            # Centralizar o texto
                            for cell in column_cells:
                                cell.alignment = Alignment(horizontal='center', vertical='center')

                    buffer.seek(0)
                    st.download_button(
                        label="Baixar em Excel",
                        data=buffer,
                        file_name="Ferias_Agendadas.xlsx",
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                        use_container_width=True
                    )

                with col5:
                    # Download em PDF
                    pdf = FPDF()
                    pdf.add_page()
                    pdf.set_font("Arial", "B", 12)
                    pdf.cell(0, 10, "F√©rias Agendadas", ln=True, align="C")
                    pdf.ln(5)
                    pdf.set_font("Arial", "B", 9)
                    pdf.cell(60, 7, "Funcion√°rio", 1, 0, "C")
                    pdf.cell(25, 7, "Data In√≠cio", 1, 0, "C")
                    pdf.cell(25, 7, "Data Fim", 1, 0, "C")
                    pdf.cell(25, 7, "Aprovado em", 1, 0, "C")
                    pdf.cell(25, 7, "Refer√™ncia", 1, 0, "C")
                    pdf.cell(32, 7, "Autorizado Por", 1, 1, "C")
                    pdf.set_font("Arial", "", 9)
                    for _, row in df.iterrows():
                        pdf.cell(60, 6, row["Funcion√°rio"], 1)
                        pdf.cell(25, 6, row["Data de In√≠cio"], 1, 0, "C")
                        pdf.cell(25, 6, row["Data Final"], 1, 0, "C")
                        pdf.cell(25, 6, row["Aprovado em"], 1, 0, "C")
                        pdf.cell(25, 6, row["Refer√™ncia"], 1, 0, "C")
                        pdf.cell(32, 6, row["Autorizado Por"], 1, 1, "C")
                    pdf_buffer = BytesIO()
                    pdf_bytes = pdf.output(dest='S').encode('latin1')
                    pdf_buffer.write(pdf_bytes)
                    pdf_buffer.seek(0)
                    st.download_button(
                        label="Baixar em PDF",
                        data=pdf_buffer,
                        file_name="Ferias_Agendadas.pdf",
                        mime="application/pdf",
                        use_container_width=True
                    )

            else:
                st.warning("Nenhuma f√©rias marcada no momento.")
        except Exception as e:
            st.error(f"Erro ao buscar f√©rias marcadas: {e}")
    else:
        st.error("Erro na conex√£o com o banco de dados.")


#Adiconar envento no calendario

def add_evento():

    # Autenticar e obter credenciais para o Google Calendar
    creds = autenticar_google_calendar()
    calendario_id = obter_id_calendario(creds)
    servico = build('calendar', 'v3', credentials=creds)

    st.markdown("<h1 style='text-align: center;'>Agendamento</h1>", unsafe_allow_html=True)

    # Obter lista de funcion√°rios com seus e-mails do banco
    conn = conexao_persistente
    if conn:
        try:
            cursor = conn.cursor()
            cursor.execute("ROLLBACK")
            cursor.execute("""
                SELECT ID, NOME, EMAIL
                FROM FUNCIONARIOS
                ORDER BY 2
            """)
            funcionarios = cursor.fetchall()  # Retorna [(ID, Nome, Email)]
        except Exception as e:
            st.error(f"Erro ao carregar os funcion√°rios: {e}")
            return
    else:
        st.error("Erro na conex√£o com o banco de dados.")
        return

    if not funcionarios:
        st.error("Nenhum funcion√°rio encontrado no banco de dados.")
        return

    # Criar um dicion√°rio para mapear o nome para ID e e-mail
    funcionarios_dict = {
        nome: {"id": id, "email": email} for id, nome, email in funcionarios
    }

    # Sele√ß√£o de m√∫ltiplos funcion√°rios
    funcionarios_selecionados = st.multiselect(
        "",
        help=None,
        options=list(funcionarios_dict.keys()),
        placeholder="Selecione os Funcion√°rios"
    )

    # Obter os e-mails dos funcion√°rios selecionados
    emails_funcionarios_selecionados = [
        funcionarios_dict[funcionario]["email"]
        for funcionario in funcionarios_selecionados
    ]

    # Formul√°rio para preenchimento dos dados
    with st.form("agendamento"):
        col1, col2 = st.columns(2)
        with col1:
            data = st.date_input("Data", format="DD/MM/YYYY")
        with col2:
            titulo = st.text_input("T√≠tulo",placeholder="Digite o t√≠tulo da reuni√£o",help="Insira um t√≠tulo descritivo para o agendamento.")

        col3, col4 = st.columns(2)
        with col3:
            hora_inicio = st.time_input("Hora de In√≠cio", key="hora_inicio")
        with col4:
            hora_fim = st.time_input("Hora de Fim", key="hora_fim")

        # Preencher o campo de e-mails com os e-mails dos funcion√°rios selecionados
        emails_convidados = st.text_area(
            "E-mails dos Envolvidos (separados por v√≠rgula)",
            value=", ".join(emails_funcionarios_selecionados),  # Usa os e-mails obtidos
            placeholder="exemplo1@dominio.com, exemplo2@dominio.com",
            key="emails_convidados",
        )

        botao_submeter = st.form_submit_button("Agendar",use_container_width=True)
        
    if botao_submeter:
        emails_formatados = [email.strip() for email in emails_convidados.split(",") if email.strip()]

        if not titulo or not emails_formatados:
            st.error("T√≠tulo e e-mails dos envolvidos s√£o obrigat√≥rios.")
        elif hora_inicio >= hora_fim:
            st.error("A hora de in√≠cio deve ser menor que a hora de fim.")
        else:
            try:
                # Formatar os hor√°rios para o formato ISO 8601
                inicio = f"{data.strftime('%Y-%m-%d')}T{hora_inicio.strftime('%H:%M:%S')}"
                fim = f"{data.strftime('%Y-%m-%d')}T{hora_fim.strftime('%H:%M:%S')}"

                # Adicionar ao Google Calendar
                adicionar_evento_calendario(
                    servico,
                    calendario_id,
                    titulo,
                    inicio,
                    fim,
                    emails_formatados,
                )
                placeholder = st.empty() 
                placeholder.success(f"Evento agendado com sucesso!", icon="‚úÖ")
                tm.sleep(2)
                placeholder.empty()
            except Exception as e:
                st.error(f"Erro ao agendar evento: {e}")




# Fun√ß√£o para exibi√ß√£o do Google Calendar
def exibir_calendario():
    st.markdown("<h1 style='text-align: center;'>Agenda</h1>", unsafe_allow_html=True)

    calendar_html = '''
    <iframe src="https://calendar.google.com/calendar/embed?height=600&wkst=1&ctz=America%2FSao_Paulo&src=ZGFuaWxvYW5kcmUyN0BnbWFpbC5jb20&color=%234285F4" 
            style="border:solid 1px #777" 
            width="800" 
            height="600" 
            frameborder="0" 
            scrolling="no">
    </iframe>
    '''
    st.markdown(calendar_html, unsafe_allow_html=True)




# Iniciar o aplicativo
if __name__ == "__main__":
    tela_inicial()
